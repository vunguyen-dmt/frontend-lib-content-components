{"version":3,"file":"OLXParser.js","names":["_fastXmlParser","require","_lodashEs","_interopRequireDefault","_problem","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","indexToLetterMap","Array","map","val","fromCharCode","exports","nonQuestionKeys","responseKeys","stripNonTextTags","_ref","tag","stripedTags","entries","_ref2","OLXParser","constructor","olxString","problem","questionData","questionOptions","ignoreAttributes","alwaysCreateTextNode","numberParseOptions","leadingZeros","hex","preserveOrder","processEntities","parserOptions","builderOptions","questionParser","XMLParser","parser","builder","XMLBuilder","parsedOLX","parse","parsedQuestionOLX","_","has","parseMultipleChoiceAnswers","problemType","widgetName","option","answers","data","widget","get","permissableTags","some","includes","Error","choice","isComplexAnswer","ProblemTypeKeys","SINGLESELECT","MULTISELECT","isEmpty","id","title","correct","isArray","element","index","answerTitle","build","eval","toLowerCase","feedback","getAnswerFeedback","groupFeedbackList","getGroupedFeedback","hintKey","feedbackKeys","answerFeedback","choices","groupFeedback","groupFeedbackArray","compoundhint","parsedFeedback","split","parseStringResponse","stringresponse","additionalStringAttributes","getFeedback","selectedFeedback","additionalAnswer","newAnswer","stringEqualHint","type","textline","size","parseNumericResponse","numericalresponse","responseParam","defaultValue","isAnswerRange","test","parseQuestions","options","problemArray","questionArray","tagName","subTag","subTagName","questionString","replace","getHints","hintsObject","hintValue","getSolutionExplanation","solution","wrapper","parsedSolution","div","_ref3","indexOf","shift","solutionString","xmlElement","feedbackString","getProblemType","problemKeys","problemTypeKeys","values","ADVANCED","getGeneralFeedback","_ref4","DROPDOWN","firstIncorrectAnswerText","find","answer","isAllIncorrectSelectedFeedbackTheSame","every","getParsedOLXData","answersObject","additionalAttributes","hints","question","solutionExplanation","TEXTINPUT","NUMERIC","settings","generalFeedback","toleranceValue","tolerance","parseInt","slice"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.js"],"sourcesContent":["// Parse OLX to JavaScript objects.\n/* eslint no-eval: 0 */\n\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport _ from 'lodash-es';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\n\nexport const indexToLetterMap = [...Array(26)].map((val, i) => String.fromCharCode(i + 65));\n\nexport const nonQuestionKeys = [\n  '@_answer',\n  '@_type',\n  'additional_answer',\n  'checkboxgroup',\n  'choicegroup',\n  'choiceresponse',\n  'correcthint',\n  'demandhint',\n  'formulaequationinput',\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optioninput',\n  'optionresponse',\n  'responseparam',\n  'solution',\n  'stringequalhint',\n  'stringresponse',\n  'textline',\n];\n\nexport const responseKeys = [\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optionresponse',\n  'stringresponse',\n  'choiceresponse',\n  'multiplechoiceresponse',\n  'truefalseresponse',\n  'optionresponse',\n  'numericalresponse',\n  'stringresponse',\n  'customresponse',\n  'symbolicresponse',\n  'coderesponse',\n  'externalresponse',\n  'formularesponse',\n  'schematicresponse',\n  'imageresponse',\n  'annotationresponse',\n  'choicetextresponse',\n];\n\nexport const stripNonTextTags = ({ input, tag }) => {\n  const stripedTags = {};\n  Object.entries(input).forEach(([key, value]) => {\n    if (key !== tag) {\n      stripedTags[key] = value;\n    }\n  });\n  return stripedTags;\n};\n\nexport class OLXParser {\n  constructor(olxString) {\n    this.problem = {};\n    this.questionData = {};\n    const questionOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n      processEntities: false,\n    };\n    const parserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      processEntities: false,\n    };\n    const builderOptions = {\n      ignoreAttributes: false,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      processEntities: false,\n    };\n    // There are two versions of the parsed XLM because the question requires the order of the\n    // parsed data to be preserved. However, all the other widgets need the data grouped by\n    // the wrapping tag.\n    const questionParser = new XMLParser(questionOptions);\n    const parser = new XMLParser(parserOptions);\n    this.builder = new XMLBuilder(builderOptions);\n    this.parsedOLX = parser.parse(olxString);\n    this.parsedQuestionOLX = questionParser.parse(olxString);\n    if (_.has(this.parsedOLX, 'problem')) {\n      this.problem = this.parsedOLX.problem;\n      this.questionData = this.parsedQuestionOLX[0].problem;\n    }\n  }\n\n  /** parseMultipleChoiceAnswers(problemType, widgetName, option)\n   * parseMultipleChoiceAnswers takes a problemType, widgetName, and a valid option. The\n   * olx for the given problem type and widget is parsed. Depending on the problem\n   * type, the title for an answer will be parsed differently because of single select and multiselect\n   * problems are rich text while dropdown answers are plain text. The rich text is parsed into an object\n   * and is converted back into a string before being added to the answer object. The parsing returns a\n   * data object with an array of answer objects. If the olx has grouped feedback, this will also be\n   * included in the data object.\n   * @param {string} problemType - string of the olx problem type\n   * @param {string} widgetName - string of the wrapping tag name (optioninput, choicegroup, checkboxgroup)\n   * @param {string} option - string of the type of answers (choice or option)\n   * @return {object} object containing an array of answer objects and possibly an array of grouped feedback\n   */\n  parseMultipleChoiceAnswers(problemType, widgetName, option) {\n    const answers = [];\n    let data = {};\n    const widget = _.get(this.problem, `${problemType}.${widgetName}`);\n    const permissableTags = ['choice', '@_type', 'compoundhint', 'option', '#text'];\n    if (_.keys(widget).some((tag) => !permissableTags.includes(tag))) {\n      throw new Error('Misc Tags, reverting to Advanced Editor');\n    }\n    const choice = _.get(widget, option);\n    const isComplexAnswer = [ProblemTypeKeys.SINGLESELECT, ProblemTypeKeys.MULTISELECT].includes(problemType);\n    if (_.isEmpty(choice)) {\n      answers.push(\n        {\n          id: indexToLetterMap[answers.length],\n          title: '',\n          correct: true,\n        },\n      );\n    } else if (_.isArray(choice)) {\n      choice.forEach((element, index) => {\n        let title = element['#text'];\n        if (isComplexAnswer) {\n          const answerTitle = stripNonTextTags({ input: element, tag: `${option}hint` });\n          title = this.builder.build(answerTitle);\n        }\n        const correct = eval(element['@_correct'].toLowerCase());\n        const id = indexToLetterMap[index];\n        const feedback = this.getAnswerFeedback(element, `${option}hint`);\n        answers.push(\n          {\n            id,\n            correct,\n            title,\n            ...feedback,\n          },\n        );\n      });\n    } else {\n      let title = choice['#text'];\n      if (isComplexAnswer) {\n        const answerTitle = stripNonTextTags({ input: choice, tag: `${option}hint` });\n        title = this.builder.build(answerTitle);\n      }\n      const feedback = this.getAnswerFeedback(choice, `${option}hint`);\n      answers.push({\n        correct: eval(choice['@_correct'].toLowerCase()),\n        id: indexToLetterMap[answers.length],\n        title,\n        ...feedback,\n      });\n    }\n    data = { answers };\n    const groupFeedbackList = this.getGroupedFeedback(widget);\n    if (groupFeedbackList.length) {\n      data = {\n        ...data,\n        groupFeedbackList,\n      };\n    }\n    return data;\n  }\n\n  /** getAnswerFeedback(choice, hintKey)\n   * getAnswerFeedback takes a choice and a valid option. The choice object is checked for\n   * selected and unselected feedback. The respective values are added to the feedback object.\n   * The feedback object is returned.\n   * @param {object} choice - object of an answer choice\n   * @param {string} hintKey - string of the wrapping tag name (optionhint or choicehint)\n   * @return {object} object containing selected and unselected feedback\n   */\n  getAnswerFeedback(choice, hintKey) {\n    let feedback = {};\n    let feedbackKeys = 'selectedFeedback';\n    if (_.has(choice, hintKey)) {\n      const answerFeedback = choice[hintKey];\n      if (_.isArray(answerFeedback)) {\n        answerFeedback.forEach((element) => {\n          if (_.has(element, '@_selected')) {\n            feedbackKeys = eval(element['@_selected'].toLowerCase()) ? 'selectedFeedback' : 'unselectedFeedback';\n          }\n          feedback = {\n            ...feedback,\n            [feedbackKeys]: this.builder.build(element),\n          };\n        });\n      } else {\n        if (_.has(answerFeedback, '@_selected')) {\n          feedbackKeys = eval(answerFeedback['@_selected'].toLowerCase()) ? 'selectedFeedback' : 'unselectedFeedback';\n        }\n        feedback = {\n          [feedbackKeys]: this.builder.build(answerFeedback),\n        };\n      }\n    }\n    return feedback;\n  }\n\n  /** getGroupedFeedback(choices)\n   * getGroupedFeedback takes choices. The choices with the attribute compoundhint are parsed for\n   * the text value and the answers associated with the feedback. The groupFeedback array is returned.\n   * @param {object} choices - object of problem's subtags\n   * @return {array} array containing objects of feedback and associated answer ids\n   */\n  getGroupedFeedback(choices) {\n    const groupFeedback = [];\n    if (_.has(choices, 'compoundhint')) {\n      const groupFeedbackArray = choices.compoundhint;\n      if (_.isArray(groupFeedbackArray)) {\n        groupFeedbackArray.forEach((element) => {\n          const parsedFeedback = stripNonTextTags({ input: element, tag: '@_value' });\n          groupFeedback.push({\n            id: groupFeedback.length,\n            answers: element['@_value'].split(' '),\n            feedback: this.builder.build(parsedFeedback),\n          });\n        });\n      } else {\n        const parsedFeedback = stripNonTextTags({ input: groupFeedbackArray, tag: '@_value' });\n        groupFeedback.push({\n          id: groupFeedback.length,\n          answers: groupFeedbackArray['@_value'].split(' '),\n          feedback: this.builder.build(parsedFeedback),\n        });\n      }\n    }\n    return groupFeedback;\n  }\n\n  /** parseStringResponse()\n   * The OLX saved to the class constuctor is parsed for text input answers. There are two\n   * types of tags with the answer attribute, stringresponse (the problem wrapper) and\n   * additional_answer. Looping through each tag, the associated title and feedback are added\n   * to the answers object and appended to the answers array. The array returned in an object\n   * with the key \"answers\". The object also conatins additional attributes that belong to the\n   * string response tag.\n   * @return {object} object containing an array of answer objects and object of additionalStringAttributes\n   */\n  parseStringResponse() {\n    const { stringresponse } = this.problem;\n    const answers = [];\n    let answerFeedback = '';\n    let additionalStringAttributes = {};\n    let data = {};\n    const feedback = this.getFeedback(stringresponse);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: stringresponse['@_answer'],\n      correct: true,\n      selectedFeedback: feedback,\n    });\n\n    // Parsing additional_answer for string response.\n    const additionalAnswer = _.get(stringresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer) => {\n        answerFeedback = this.getFeedback(newAnswer);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(additionalAnswer);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // Parsing stringequalhint for string response.\n    const stringEqualHint = _.get(stringresponse, 'stringequalhint', []);\n    if (_.isArray(stringEqualHint)) {\n      stringEqualHint.forEach((newAnswer) => {\n        const parsedFeedback = stripNonTextTags({ input: newAnswer, tag: '@_answer' });\n        answerFeedback = this.builder.build(parsedFeedback);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: false,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      const parsedFeedback = stripNonTextTags({ input: stringEqualHint, tag: '@_answer' });\n      answerFeedback = this.builder.build(parsedFeedback);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: stringEqualHint['@_answer'],\n        correct: false,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // TODO: Support multiple types.\n    additionalStringAttributes = {\n      type: _.get(stringresponse, '@_type'),\n      textline: {\n        size: _.get(stringresponse, 'textline.@_size'),\n      },\n    };\n\n    data = {\n      answers,\n      additionalStringAttributes,\n    };\n\n    return data;\n  }\n\n  /** parseNumericResponse()\n   * The OLX saved to the class constuctor is parsed for numeric answers. There are two\n   * types of tags for numeric answers, responseparam and additional_answer. Looping through\n   * each tag, the associated title and feedback and if the answer is an answer range are\n   * added to the answers object and appended to the answers array. The array returned in\n   * an object with the key \"answers\".\n   * @return {object} object containing an array of answer objects\n   */\n  parseNumericResponse() {\n    const { numericalresponse } = this.problem;\n    let answerFeedback = '';\n    const answers = [];\n    let responseParam = {};\n    const feedback = this.getFeedback(numericalresponse);\n    if (_.has(numericalresponse, 'responseparam')) {\n      const type = _.get(numericalresponse, 'responseparam.@_type');\n      const defaultValue = _.get(numericalresponse, 'responseparam.@_default');\n      responseParam = {\n        [type]: defaultValue,\n      };\n    }\n    const isAnswerRange = /[([]\\d*,\\d*[)\\]]/gm.test(numericalresponse['@_answer']);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: numericalresponse['@_answer'],\n      correct: true,\n      selectedFeedback: feedback,\n      isAnswerRange,\n      ...responseParam,\n    });\n\n    // Parsing additional_answer for numerical response.\n    const additionalAnswer = _.get(numericalresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer) => {\n        answerFeedback = this.getFeedback(newAnswer);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(additionalAnswer);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n        isAnswerRange: false,\n      });\n    }\n    return { answers };\n  }\n\n  /** parseQuestions(problemType)\n   * parseQuestions takes a problemType. The problem type is used to determine where the\n   * text for the question lies (sibling or child to warpping problem type tags).\n   * Using the XMLBuilder, the question is built with its proper children (including label\n   * and description). The string version of the OLX is return, replacing the description\n   * tags with italicized tags for styling purposes.\n   * @param {string} problemType - string of the olx problem type\n   * @return {string} string of OLX\n   */\n  parseQuestions(problemType) {\n    const options = {\n      ignoreAttributes: false,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n      processEntities: false,\n    };\n    const builder = new XMLBuilder(options);\n    const problemArray = _.get(this.questionData[0], problemType) || this.questionData;\n\n    const questionArray = [];\n    problemArray.forEach(tag => {\n      const tagName = Object.keys(tag)[0];\n      if (!nonQuestionKeys.includes(tagName)) {\n        if (tagName === 'script') {\n          throw new Error('Script Tag, reverting to Advanced Editor');\n        }\n        questionArray.push(tag);\n      } else if (responseKeys.includes(tagName)) {\n        /* <label> and <description> tags often are both valid olx as siblings or children of response type tags.\n         They, however, do belong in the question, so we append them to the question.\n        */\n        tag[tagName].forEach(subTag => {\n          const subTagName = Object.keys(subTag)[0];\n          if (subTagName === 'label' || subTagName === 'description') {\n            questionArray.push(subTag);\n          }\n        });\n      }\n    });\n    const questionString = builder.build(questionArray);\n    return questionString.replace(/<description>/gm, '<em>').replace(/<\\/description>/gm, '</em>');\n  }\n\n  /** getHints()\n   * The OLX saved to the class constuctor is parsed for demand hint tags with hint subtags. An empty array is returned\n   * if there are no hints in the OLX. Otherwise the hint tag is parsed and appended to the hintsObject arrary. After\n   * going through all the hints the hintsObject array is returned.\n   * @return {array} array of hint objects\n   */\n  getHints() {\n    const hintsObject = [];\n    if (_.has(this.problem, 'demandhint.hint')) {\n      const hint = _.get(this.problem, 'demandhint.hint');\n      if (_.isArray(hint)) {\n        hint.forEach(element => {\n          const hintValue = this.builder.build(element);\n          hintsObject.push({\n            id: hintsObject.length,\n            value: hintValue,\n          });\n        });\n      } else {\n        const hintValue = this.builder.build(hint);\n        hintsObject.push({\n          id: hintsObject.length,\n          value: hintValue,\n        });\n      }\n    }\n    return hintsObject;\n  }\n\n  /** parseQuestions(problemType)\n   * parseQuestions takes a problemType. The problem type is used to determine where the\n   * text for the solution lies (sibling or child to warpping problem type tags).\n   * Using the XMLBuilder, the solution is built removing the redundant \"explanation\" that is\n   * appended for Studio styling purposes. The string version of the OLX is return.\n   * @param {string} problemType - string of the olx problem type\n   * @return {string} string of OLX\n   */\n  getSolutionExplanation(problemType) {\n    if (!_.has(this.problem, `${problemType}.solution`) && !_.has(this.problem, 'solution')) { return null; }\n    let solution = _.get(this.problem, `${problemType}.solution`, null) || _.get(this.problem, 'solution', null);\n    const wrapper = Object.keys(solution)[0];\n    if (Object.keys(solution).length === 1 && wrapper === 'div') {\n      const parsedSolution = {};\n      Object.entries(solution.div).forEach(([key, value]) => {\n        if (key.indexOf('@_' === -1)) {\n          // The redundant \"explanation\" title should be removed.\n          // If the key is a paragraph or h2, and the text of either the first or only item is \"Explanation.\"\n          if (\n            (key === 'p' || key === 'h2')\n            && (_.get(value, '#text', null) === 'Explanation'\n            || (_.isArray(value) && _.get(value[0], '#text', null) === 'Explanation'))\n          ) {\n            if (_.isArray(value)) {\n              value.shift();\n              parsedSolution[key] = value;\n            }\n          } else {\n            parsedSolution[key] = value;\n          }\n        }\n      });\n      solution = parsedSolution;\n    }\n    const solutionString = this.builder.build(solution);\n    return solutionString;\n  }\n\n  /** getFeedback(xmlElement)\n   * getFeedback takes xmlElement. The xmlElement is searched for the attribute correcthint.\n   * An empty string is returned if the parameter is not present. Otherwise a string of the feedback\n   * is returned.\n   * @param {object} xmlElement - object of answer attributes\n   * @return {string} string of feedback\n   */\n  getFeedback(xmlElement) {\n    if (!_.has(xmlElement, 'correcthint')) { return ''; }\n    const feedback = _.get(xmlElement, 'correcthint');\n    const feedbackString = this.builder.build(feedback);\n    return feedbackString;\n  }\n\n  /** getProblemType()\n   * The OLX saved to the class constuctor is parsed for a valid problem type (referencing problemKeys).\n   * For blank problems, it returns null. For OLX problems tags not defined in problemKeys or OLX with\n   * multiple problem tags, it returns advanced. For defined, single problem tag, it returns the\n   * associated problem type.\n   * @return {string} problem type\n   */\n  getProblemType() {\n    const problemKeys = Object.keys(this.problem);\n    const problemTypeKeys = problemKeys.filter(key => Object.values(ProblemTypeKeys).indexOf(key) !== -1);\n    if (problemTypeKeys.length === 0) {\n      // a blank problem is a problem which contains only `<problem></problem>` as it's olx.\n      // blank problems are not given types, so that a type may be selected.\n      if (problemKeys.length === 1 && problemKeys[0] === '#text' && this.problem[problemKeys[0]] === '') {\n        return null;\n      }\n      // if we have no matching problem type, the problem is advanced.\n      return ProblemTypeKeys.ADVANCED;\n    }\n    // make sure compound problems are treated as advanced\n    if ((problemTypeKeys.length > 1)\n      || (_.isArray(this.problem[problemTypeKeys[0]])\n        && this.problem[problemTypeKeys[0]].length > 1)) {\n      return ProblemTypeKeys.ADVANCED;\n    }\n    const problemType = problemTypeKeys[0];\n    return problemType;\n  }\n\n  /** getGeneralFeedback({ answers, problemType })\n   * getGeneralFeedback takes answers and problemType. The problem type determines if the problem should be checked\n   * for general feedback. The incorrect answers are checked to seee if all of their feedback is the same and\n   * returns the first incorrect answer's feedback if true. When conditions are unmet, it returns and empty string.\n   * @param {array} answers - array of answer objects\n   * @param {string} problemType - string of string of the olx problem type\n   * @return {string} text for incorrect feedback\n   */\n  getGeneralFeedback({ answers, problemType }) {\n    /* Feedback is Generalized for a Problem IFF:\n    1. The problem is of Types: Single Select or Dropdown.\n    2. All the problem's incorrect, if Selected answers are equivalent strings, and there is no other feedback.\n    */\n    if (problemType === ProblemTypeKeys.SINGLESELECT || problemType === ProblemTypeKeys.DROPDOWN) {\n      const firstIncorrectAnswerText = answers.find(answer => answer.correct === false)?.selectedFeedback;\n      const isAllIncorrectSelectedFeedbackTheSame = answers.every(answer => (answer.correct\n        ? true\n        : answer?.selectedFeedback === firstIncorrectAnswerText\n      ));\n      if (isAllIncorrectSelectedFeedbackTheSame) {\n        return firstIncorrectAnswerText;\n      }\n    }\n    return '';\n  }\n\n  getParsedOLXData() {\n    if (_.isEmpty(this.problem)) {\n      return {};\n    }\n\n    if (Object.keys(this.problem).some((key) => key.indexOf('@_') !== -1)) {\n      throw new Error('Misc Attributes asscoiated with problem, opening in advanced editor');\n    }\n\n    let answersObject = {};\n    let additionalAttributes = {};\n    let groupFeedbackList = [];\n    const problemType = this.getProblemType();\n    const hints = this.getHints();\n    const question = this.parseQuestions(problemType);\n    const solutionExplanation = this.getSolutionExplanation(problemType);\n\n    switch (problemType) {\n      case ProblemTypeKeys.DROPDOWN:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        answersObject = this.parseStringResponse();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        answersObject = this.parseNumericResponse();\n        break;\n      case ProblemTypeKeys.MULTISELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.ADVANCED:\n        return {\n          problemType,\n          settings: {},\n        };\n      default:\n        // if problem is unset, return null\n        return {};\n    }\n    const generalFeedback = this.getGeneralFeedback({ answers: answersObject.answers, problemType });\n    if (_.has(answersObject, 'additionalStringAttributes')) {\n      additionalAttributes = { ...answersObject.additionalStringAttributes };\n    }\n\n    if (_.has(answersObject, 'groupFeedbackList')) {\n      groupFeedbackList = answersObject.groupFeedbackList;\n    }\n    const { answers } = answersObject;\n    const settings = { hints };\n    if (ProblemTypeKeys.NUMERIC === problemType && _.has(answers[0], 'tolerance')) {\n      const toleranceValue = answers[0].tolerance;\n      if (!toleranceValue || toleranceValue.length === 0) {\n        settings.tolerance = { value: null, type: 'None' };\n      } else if (toleranceValue.includes('%')) {\n        settings.tolerance = { value: parseInt(toleranceValue.slice(0, -1)), type: 'Percent' };\n      } else {\n        settings.tolerance = { value: parseInt(toleranceValue), type: 'Number' };\n      }\n    } else {\n      settings.tolerance = { value: null, type: 'None' };\n    }\n    if (solutionExplanation) { settings.solutionExplanation = solutionExplanation; }\n\n    return {\n      question,\n      settings,\n      answers,\n      problemType,\n      additionalAttributes,\n      generalFeedback,\n      groupFeedbackList,\n    };\n  }\n}\n"],"mappings":"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"}