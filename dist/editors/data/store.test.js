"use strict";

var _redux = require("redux");
var _reduxThunk = _interopRequireDefault(require("redux-thunk"));
var _logOnlyInProduction = require("redux-devtools-extension/logOnlyInProduction");
var _reduxLogger = require("redux-logger");
var _redux2 = _interopRequireWildcard(require("./redux"));
var _store = _interopRequireWildcard(require("./store"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
jest.mock('./redux', () => ({
  __esModule: true,
  default: 'REDUCER',
  actions: 'ACTIONS',
  selectors: 'SELECTORS'
}));
jest.mock('redux-logger', () => ({
  createLogger: () => 'logger'
}));
jest.mock('redux-thunk', () => 'thunkMiddleware');
jest.mock('redux', () => ({
  applyMiddleware: function () {
    for (var _len = arguments.length, middleware = new Array(_len), _key = 0; _key < _len; _key++) {
      middleware[_key] = arguments[_key];
    }
    return {
      applied: middleware
    };
  },
  createStore: (reducer, middleware) => ({
    reducer,
    middleware
  })
}));
jest.mock('redux-devtools-extension/logOnlyInProduction', () => ({
  composeWithDevTools: middleware => ({
    withDevTools: middleware
  })
}));
describe('store aggregator module', () => {
  describe('exported store', () => {
    it('is generated by createStore', () => {
      expect(_store.default).toEqual((0, _store.createStore)());
    });
    it('creates store with connected reducers', () => {
      expect((0, _store.createStore)().reducer).toEqual(_redux2.default);
    });
    describe('middleware', () => {
      it('exports thunk and logger middleware, composed and applied with dev tools', () => {
        expect((0, _store.createStore)().middleware).toEqual((0, _logOnlyInProduction.composeWithDevTools)((0, _redux.applyMiddleware)(_reduxThunk.default, (0, _reduxLogger.createLogger)())));
      });
    });
  });
  describe('dev exposed tools', () => {
    beforeEach(() => {
      window.store = undefined;
      window.actions = undefined;
      window.selectors = undefined;
    });
    it('exposes redux tools if in development env', () => {
      process.env.NODE_ENV = 'development';
      const store = (0, _store.createStore)();
      expect(window.store).toEqual(store);
      expect(window.actions).toEqual(_redux2.actions);
      expect(window.selectors).toEqual(_redux2.selectors);
    });
    it('does not expose redux tools if in production env', () => {
      process.env.NODE_ENV = 'production';
      (0, _store.createStore)();
      expect(window.store).toEqual(undefined);
      expect(window.actions).toEqual(undefined);
      expect(window.selectors).toEqual(undefined);
    });
  });
});
//# sourceMappingURL=store.test.js.map