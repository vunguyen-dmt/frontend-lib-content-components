{"version":3,"file":"OLXParser.js","names":["_fastXmlParser","require","_lodashEs","_interopRequireDefault","_problem","obj","__esModule","default","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","key","value","_toPropertyKey","configurable","writable","i","_toPrimitive","String","Symbol","toPrimitive","call","TypeError","Number","indexToLetterMap","exports","Array","map","val","fromCharCode","nonQuestionKeys","responseKeys","stripNonTextTags","_ref","input","tag","stripedTags","entries","_ref2","OLXParser","constructor","olxString","baseParserOptions","ignoreAttributes","numberParseOptions","leadingZeros","hex","processEntities","problem","parserOptions","alwaysCreateTextNode","builderOptions","parser","XMLParser","builder","XMLBuilder","parsedOLX","parse","_","has","richTextProblem","richTextOptions","preserveOrder","trimValues","richTextBuilderOptions","richTextParser","richTextBuilder","richTextOLX","getPreservedAnswersAndFeedback","problemType","widgetName","option","problemBody","section","includes","isChoiceProblem","ProblemTypeKeys","NUMERIC","TEXTINPUT","preservedAnswers","correctAnswerFeedbackTag","incorrectAnswerFeedbackTag","problemBodyArr","subtag","tagNames","unshift","currentAnswerArr","answer","parseMultipleChoiceAnswers","answers","data","widget","get","permissableTags","some","Error","choice","isComplexAnswer","RichTextProblems","isEmpty","id","title","correct","isArray","element","index","preservedAnswer","preservedFeedback","build","eval","toLowerCase","feedback","getAnswerFeedback","groupFeedbackList","getGroupedFeedback","hintKey","feedbackKeys","feedbackArr","isSelectedFeedback","choices","groupFeedback","groupFeedbackArray","compoundhint","parsedFeedback","split","parseStringResponse","firstCorrectFeedback","stringresponse","answerFeedback","additionalStringAttributes","firstFeedback","getFeedback","selectedFeedback","additionalAnswerFeedback","stringEqualHintFeedback","additionalAnswer","newAnswer","indx","stringEqualHint","stringequalhint","type","textline","size","parseNumericResponse","numericalresponse","responseParam","defaultValue","isAnswerRange","test","parseQuestions","problemArray","questionArray","tagName","subTag","subTagName","questionString","res","replaceOlxDescriptionTag","hasOLXAfterProblemTypeTag","problemTagIndex","hasExtraOLX","_ref3","olxAfterProblemType","slice","values","currentKey","invalidText","invalidKey","replace","getHints","hintsObject","preservedProblem","objKeys","currentDemandHint","demandhint","hint","hintValue","getSolutionExplanation","solutionBody","divBody","solution","solutionArray","div","tagText","toString","trim","solutionString","xmlElement","feedbackString","getProblemType","problemKeys","problemTypeKeys","indexOf","ADVANCED","getGeneralFeedback","_ref4","SINGLESELECT","DROPDOWN","firstIncorrectAnswerText","find","isAllIncorrectSelectedFeedbackTheSame","every","getParsedOLXData","settingsOlxAttributes","answersObject","additionalAttributes","hints","question","solutionExplanation","MULTISELECT","settings","generalFeedback","toleranceValue","tolerance","parseInt"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.js"],"sourcesContent":["// Parse OLX to JavaScript objects.\n/* eslint no-eval: 0 */\n\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport _ from 'lodash-es';\nimport { ProblemTypeKeys, RichTextProblems, settingsOlxAttributes } from '../../../data/constants/problem';\n\nexport const indexToLetterMap = [...Array(26)].map((val, i) => String.fromCharCode(i + 65));\n\nexport const nonQuestionKeys = [\n  '@_answer',\n  '@_type',\n  'additional_answer',\n  'checkboxgroup',\n  'choicegroup',\n  'choiceresponse',\n  'correcthint',\n  'demandhint',\n  'formulaequationinput',\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optioninput',\n  'optionresponse',\n  'responseparam',\n  'solution',\n  'stringequalhint',\n  'stringresponse',\n  'textline',\n];\n\nexport const responseKeys = [\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optionresponse',\n  'stringresponse',\n  'choiceresponse',\n  'multiplechoiceresponse',\n  'truefalseresponse',\n  'optionresponse',\n  'numericalresponse',\n  'stringresponse',\n  'customresponse',\n  'symbolicresponse',\n  'coderesponse',\n  'externalresponse',\n  'formularesponse',\n  'schematicresponse',\n  'imageresponse',\n  'annotationresponse',\n  'choicetextresponse',\n];\n\nexport const stripNonTextTags = ({ input, tag }) => {\n  const stripedTags = {};\n  Object.entries(input).forEach(([key, value]) => {\n    if (key !== tag) {\n      stripedTags[key] = value;\n    }\n  });\n  return stripedTags;\n};\n\nexport class OLXParser {\n  constructor(olxString) {\n    // There are two versions of the parsed XLM because the fields using tinymce require the order\n    // of the parsed data and spacing values to be preserved. However, all the other widgets need\n    // the data grouped by the wrapping tag. Examples of the parsed format can be found here:\n    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md\n    const baseParserOptions = {\n      ignoreAttributes: false,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      processEntities: false,\n    };\n\n    // Base Parser\n    this.problem = {};\n    const parserOptions = {\n      ...baseParserOptions,\n      alwaysCreateTextNode: true,\n    };\n    const builderOptions = {\n      ...baseParserOptions,\n    };\n    const parser = new XMLParser(parserOptions);\n    this.builder = new XMLBuilder(builderOptions);\n    this.parsedOLX = parser.parse(olxString);\n    if (_.has(this.parsedOLX, 'problem')) {\n      this.problem = this.parsedOLX.problem;\n    }\n\n    // Parser with `preservedOrder: true` and `trimValues: false`\n    this.richTextProblem = [];\n    const richTextOptions = {\n      ...baseParserOptions,\n      alwaysCreateTextNode: true,\n      preserveOrder: true,\n      trimValues: false,\n    };\n    const richTextBuilderOptions = {\n      ...baseParserOptions,\n      preserveOrder: true,\n      trimValues: false,\n    };\n    const richTextParser = new XMLParser(richTextOptions);\n    this.richTextBuilder = new XMLBuilder(richTextBuilderOptions);\n    this.richTextOLX = richTextParser.parse(olxString);\n    if (_.has(this.parsedOLX, 'problem')) {\n      this.richTextProblem = this.richTextOLX[0].problem;\n    }\n  }\n\n  /** getPreservedAnswersAndFeedback(problemType, widgetName, option)\n   * getPreservedAnswersAndFeedback takes a problemType, widgetName, and a valid option. The\n   * olx for the given problem type and widget is parsed. Do to the structure of xml that is\n   * parsed with the prsereved attribute, the function has to loop through arrays of objects.\n   * The first for-loop checks for feedback tags and answer choices and appended to the\n   * preservedAnswers. The nested for loop checks for feedback and answer values inside the\n   * option (answer) tags.\n   * @param {string} problemType - string of the olx problem type\n   * @param {string} widgetName - string of the wrapping tag name\n   *                              (optioninput, choicegroup, checkboxgroup, additional_answer)\n   * @param {string} option - string of the type of answers (choice, option, correcthint, stringequalhint)\n   * @return {array} array containing answer objects and possibly an array of grouped feedback\n   */\n  getPreservedAnswersAndFeedback(problemType, widgetName, option) {\n    const [problemBody] = this.richTextProblem.filter(section => Object.keys(section).includes(problemType));\n    const isChoiceProblem = !([ProblemTypeKeys.NUMERIC, ProblemTypeKeys.TEXTINPUT].includes(problemType));\n    const preservedAnswers = [];\n    let correctAnswerFeedbackTag = option;\n    let incorrectAnswerFeedbackTag;\n    if (problemType === ProblemTypeKeys.TEXTINPUT) {\n      [correctAnswerFeedbackTag, incorrectAnswerFeedbackTag] = option;\n    }\n    const problemBodyArr = problemBody[problemType];\n    problemBodyArr.forEach(subtag => {\n      const tagNames = Object.keys(subtag);\n      if (!isChoiceProblem && tagNames.includes(correctAnswerFeedbackTag)) {\n        preservedAnswers.unshift(subtag[correctAnswerFeedbackTag]);\n      }\n      if (problemType === ProblemTypeKeys.TEXTINPUT && tagNames.includes(incorrectAnswerFeedbackTag)) {\n        preservedAnswers.push(subtag);\n      }\n      if (tagNames.includes(widgetName)) {\n        const currentAnswerArr = subtag[widgetName];\n        currentAnswerArr.forEach(answer => {\n          if (Object.keys(answer).includes(correctAnswerFeedbackTag)) {\n            preservedAnswers.push(answer[correctAnswerFeedbackTag]);\n          }\n        });\n      }\n    });\n    return preservedAnswers;\n  }\n\n  /** parseMultipleChoiceAnswers(problemType, widgetName, option)\n   * parseMultipleChoiceAnswers takes a problemType, widgetName, and a valid option. The\n   * olx for the given problem type and widget is parsed. Depending on the problem\n   * type, the title for an answer will be parsed differently because of single select and multiselect\n   * problems are rich text while dropdown answers are plain text. The rich text is parsed into an object\n   * and is converted back into a string before being added to the answer object. The parsing returns a\n   * data object with an array of answer objects. If the olx has grouped feedback, this will also be\n   * included in the data object.\n   * @param {string} problemType - string of the olx problem type\n   * @param {string} widgetName - string of the wrapping tag name (optioninput, choicegroup, checkboxgroup)\n   * @param {string} option - string of the type of answers (choice or option)\n   * @return {object} object containing an array of answer objects and possibly an array of grouped feedback\n   */\n  parseMultipleChoiceAnswers(problemType, widgetName, option) {\n    const preservedAnswers = this.getPreservedAnswersAndFeedback(\n      problemType,\n      widgetName,\n      option,\n    );\n    const answers = [];\n    let data = {};\n    const widget = _.get(this.problem, `${problemType}.${widgetName}`);\n    const permissableTags = ['choice', '@_type', 'compoundhint', 'option', '#text'];\n    if (_.keys(widget).some((tag) => !permissableTags.includes(tag))) {\n      throw new Error('Misc Tags, reverting to Advanced Editor');\n    }\n    if (_.get(this.problem, `${problemType}.@_partial_credit`)) {\n      throw new Error('Partial credit not supported by GUI, reverting to Advanced Editor');\n    }\n    const choice = _.get(widget, option);\n    const isComplexAnswer = RichTextProblems.includes(problemType);\n    if (_.isEmpty(choice)) {\n      answers.push(\n        {\n          id: indexToLetterMap[answers.length],\n          title: '',\n          correct: true,\n        },\n      );\n    } else if (_.isArray(choice)) {\n      choice.forEach((element, index) => {\n        const preservedAnswer = preservedAnswers[index].filter(answer => !Object.keys(answer).includes(`${option}hint`));\n        const preservedFeedback = preservedAnswers[index].filter(answer => Object.keys(answer).includes(`${option}hint`));\n        let title = element['#text'];\n\n        if (isComplexAnswer && preservedAnswer) {\n          title = this.richTextBuilder.build(preservedAnswer);\n        }\n        const correct = eval(element['@_correct'].toLowerCase());\n        const id = indexToLetterMap[index];\n        const feedback = this.getAnswerFeedback(preservedFeedback, `${option}hint`);\n        answers.push(\n          {\n            id,\n            correct,\n            title,\n            ...feedback,\n          },\n        );\n      });\n    } else {\n      const preservedAnswer = preservedAnswers[0].filter(answer => !Object.keys(answer).includes(`${option}hint`));\n      const preservedFeedback = preservedAnswers[0].filter(answer => Object.keys(answer).includes(`${option}hint`));\n      let title = choice['#text'];\n\n      if (isComplexAnswer && preservedAnswer) {\n        title = this.richTextBuilder.build(preservedAnswer);\n      }\n      const feedback = this.getAnswerFeedback(preservedFeedback, `${option}hint`);\n      answers.push({\n        correct: eval(choice['@_correct'].toLowerCase()),\n        id: indexToLetterMap[answers.length],\n        title,\n        ...feedback,\n      });\n    }\n    data = { answers };\n    const groupFeedbackList = this.getGroupedFeedback(widget);\n    if (groupFeedbackList.length) {\n      data = {\n        ...data,\n        groupFeedbackList,\n      };\n    }\n    return data;\n  }\n\n  /** getAnswerFeedback(preservedFeedback, hintKey)\n   * getAnswerFeedback takes preservedFeedback and a valid option. The preservedFeedback object\n   * is checked for selected and unselected feedback. The respective values are added to the\n   * feedback object. The feedback object is returned.\n   * @param {array} preservedFeedback - array of feedback objects\n   * @param {string} hintKey - string of the wrapping tag name (optionhint or choicehint)\n   * @return {object} object containing selected and unselected feedback\n   */\n  getAnswerFeedback(preservedFeedback, hintKey) {\n    const feedback = {};\n    let feedbackKeys = 'selectedFeedback';\n    if (_.isEmpty(preservedFeedback)) { return feedback; }\n\n    preservedFeedback.forEach((feedbackArr) => {\n      if (_.has(feedbackArr, hintKey)) {\n        if (_.has(feedbackArr, ':@') && _.has(feedbackArr[':@'], '@_selected')) {\n          const isSelectedFeedback = feedbackArr[':@']['@_selected'] === 'true';\n          feedbackKeys = isSelectedFeedback ? 'selectedFeedback' : 'unselectedFeedback';\n        }\n        feedback[feedbackKeys] = this.richTextBuilder.build(feedbackArr[hintKey]);\n      }\n    });\n    return feedback;\n  }\n\n  /** getGroupedFeedback(choices)\n   * getGroupedFeedback takes choices. The choices with the attribute compoundhint are parsed for\n   * the text value and the answers associated with the feedback. The groupFeedback array is returned.\n   * @param {object} choices - object of problem's subtags\n   * @return {array} array containing objects of feedback and associated answer ids\n   */\n  getGroupedFeedback(choices) {\n    const groupFeedback = [];\n    if (_.has(choices, 'compoundhint')) {\n      const groupFeedbackArray = choices.compoundhint;\n      if (_.isArray(groupFeedbackArray)) {\n        groupFeedbackArray.forEach((element) => {\n          const parsedFeedback = stripNonTextTags({ input: element, tag: '@_value' });\n          groupFeedback.push({\n            id: groupFeedback.length,\n            answers: element['@_value'].split(' '),\n            feedback: this.builder.build(parsedFeedback),\n          });\n        });\n      } else {\n        const parsedFeedback = stripNonTextTags({ input: groupFeedbackArray, tag: '@_value' });\n        groupFeedback.push({\n          id: groupFeedback.length,\n          answers: groupFeedbackArray['@_value'].split(' '),\n          feedback: this.builder.build(parsedFeedback),\n        });\n      }\n    }\n    return groupFeedback;\n  }\n\n  /** parseStringResponse()\n   * The OLX saved to the class constuctor is parsed for text input answers. There are two\n   * types of tags with the answer attribute, stringresponse (the problem wrapper) and\n   * additional_answer. Looping through each tag, the associated title and feedback are added\n   * to the answers object and appended to the answers array. The array returned in an object\n   * with the key \"answers\". The object also conatins additional attributes that belong to the\n   * string response tag.\n   * @return {object} object containing an array of answer objects and object of additionalStringAttributes\n   */\n  parseStringResponse() {\n    const [firstCorrectFeedback, ...preservedFeedback] = this.getPreservedAnswersAndFeedback(\n      ProblemTypeKeys.TEXTINPUT,\n      'additional_answer',\n      ['correcthint', 'stringequalhint'],\n    );\n    const { stringresponse } = this.problem;\n    const answers = [];\n    let answerFeedback = '';\n    let additionalStringAttributes = {};\n    let data = {};\n    const firstFeedback = this.getFeedback(firstCorrectFeedback);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: stringresponse['@_answer'],\n      correct: true,\n      selectedFeedback: firstFeedback,\n    });\n\n    const additionalAnswerFeedback = preservedFeedback.filter(feedback => _.isArray(feedback));\n    const stringEqualHintFeedback = preservedFeedback.filter(feedback => !_.isArray(feedback));\n\n    // Parsing additional_answer for string response.\n    const additionalAnswer = _.get(stringresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer, indx) => {\n        answerFeedback = this.getFeedback(additionalAnswerFeedback[indx]);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(additionalAnswerFeedback[0]);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // Parsing stringequalhint for string response.\n    const stringEqualHint = _.get(stringresponse, 'stringequalhint', []);\n    if (_.isArray(stringEqualHint)) {\n      stringEqualHint.forEach((newAnswer, indx) => {\n        answerFeedback = this.richTextBuilder.build(stringEqualHintFeedback[indx].stringequalhint);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: false,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.richTextBuilder.build(stringEqualHintFeedback[0].stringequalhint);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: stringEqualHint['@_answer'],\n        correct: false,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // TODO: Support multiple types.\n    additionalStringAttributes = {\n      type: _.get(stringresponse, '@_type'),\n      textline: {\n        size: _.get(stringresponse, 'textline.@_size'),\n      },\n    };\n\n    data = {\n      answers,\n      additionalStringAttributes,\n    };\n\n    return data;\n  }\n\n  /** parseNumericResponse()\n   * The OLX saved to the class constuctor is parsed for numeric answers. There are two\n   * types of tags for numeric answers, responseparam and additional_answer. Looping through\n   * each tag, the associated title and feedback and if the answer is an answer range are\n   * added to the answers object and appended to the answers array. The array returned in\n   * an object with the key \"answers\".\n   * @return {object} object containing an array of answer objects\n   */\n  parseNumericResponse() {\n    const [firstCorrectFeedback, ...preservedFeedback] = this.getPreservedAnswersAndFeedback(\n      ProblemTypeKeys.NUMERIC,\n      'additional_answer',\n      'correcthint',\n    );\n    const { numericalresponse } = this.problem;\n    if (_.get(numericalresponse, '@_partial_credit')) {\n      throw new Error('Partial credit not supported by GUI, reverting to Advanced Editor');\n    }\n    let answerFeedback = '';\n    const answers = [];\n    let responseParam = {};\n    const feedback = this.getFeedback(firstCorrectFeedback);\n    if (_.has(numericalresponse, 'responseparam')) {\n      const type = _.get(numericalresponse, 'responseparam.@_type');\n      const defaultValue = _.get(numericalresponse, 'responseparam.@_default');\n      responseParam = {\n        [type]: defaultValue,\n      };\n    }\n    const isAnswerRange = /[([]\\d*,\\d*[)\\]]/gm.test(numericalresponse['@_answer']);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: numericalresponse['@_answer'],\n      correct: true,\n      selectedFeedback: feedback,\n      isAnswerRange,\n      ...responseParam,\n    });\n\n    // Parsing additional_answer for numerical response.\n    const additionalAnswer = _.get(numericalresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer, indx) => {\n        answerFeedback = this.getFeedback(preservedFeedback[indx]);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(preservedFeedback[0]);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n        isAnswerRange: false,\n      });\n    }\n    return { answers };\n  }\n\n  /** parseQuestions(problemType)\n   * parseQuestions takes a problemType. The problem type is used to determine where the\n   * text for the question lies (sibling or child to warpping problem type tags).\n   * Using the XMLBuilder, the question is built with its proper children (including label\n   * and description). The string version of the OLX is return, replacing the description\n   * tags with italicized tags for styling purposes.\n   * @param {string} problemType - string of the olx problem type\n   * @return {string} string of OLX\n   */\n  parseQuestions(problemType) {\n    const problemArray = _.get(this.richTextProblem[0], problemType) || this.richTextProblem;\n\n    const questionArray = [];\n    problemArray.forEach(tag => {\n      const tagName = Object.keys(tag)[0];\n      if (!nonQuestionKeys.includes(tagName)) {\n        if (tagName === 'script') {\n          throw new Error('Script Tag, reverting to Advanced Editor');\n        }\n        questionArray.push(tag);\n      } else if (responseKeys.includes(tagName)) {\n        /* Tags that are not used for other parts of the question such as <solution> or <choicegroup>\n         should be included in the question. These include but are not limited to tags like <label>,\n         <description> and <table> as they often are both valid olx as siblings or children of response\n         type tags. */\n        tag[tagName].forEach(subTag => {\n          const subTagName = Object.keys(subTag)[0];\n          if (!nonQuestionKeys.includes(subTagName)) {\n            questionArray.push(subTag);\n          }\n        });\n      }\n    });\n    const questionString = this.richTextBuilder.build(questionArray);\n    const res = this.replaceOlxDescriptionTag(questionString);\n    return res;\n  }\n\n  /** hasOLXAfterProblemTypeTag(problemType)\n   * checkTextAfterProblemTypeTag takes a problemType. The problem type is used to determine\n   * if there is olx after the answer choices the problem. Simple problems are not expected\n   * to have olx after the answer choices and returns false. In the event that a problem has\n   * olx after the answer choices it returns true and will raise an error.\n   * @param {string} problemType - string of the olx problem type\n   * @return {bool}\n   */\n  hasOLXAfterProblemTypeTag(problemType) {\n    let problemTagIndex = this.richTextProblem.length - 1;\n    let hasExtraOLX = false;\n    Object.entries(this.richTextProblem).forEach(([i, value]) => {\n      if (Object.keys(value).includes(problemType)) {\n        problemTagIndex = i;\n      }\n    });\n\n    if (problemTagIndex < this.richTextProblem.length - 1) {\n      const olxAfterProblemType = this.richTextProblem.slice(problemTagIndex + 1);\n      Object.values(olxAfterProblemType).forEach(value => {\n        const currentKey = Object.keys(value)[0];\n        const invalidText = currentKey === '#text' && value[currentKey] !== '\\n';\n        const invalidKey = !nonQuestionKeys.includes(currentKey) && currentKey !== '#text';\n        if (invalidText) {\n          hasExtraOLX = true;\n        } else if (invalidKey) {\n          hasExtraOLX = true;\n        }\n      });\n    }\n    return hasExtraOLX;\n  }\n\n  replaceOlxDescriptionTag(questionString) {\n    return questionString.replace(/<description>/gm, '<em class=\"olx_description\">').replace(/<\\/description>/gm, '</em>');\n  }\n\n  /** getHints()\n   * The OLX saved to the class constuctor is parsed for demand hint tags with hint subtags. An empty array is returned\n   * if there are no hints in the OLX. Otherwise the hint tag is parsed and appended to the hintsObject arrary. After\n   * going through all the hints the hintsObject array is returned.\n   * @return {array} array of hint objects\n   */\n  getHints() {\n    const hintsObject = [];\n    if (_.has(this.problem, 'demandhint.hint')) {\n      const preservedProblem = this.richTextProblem;\n      preservedProblem.forEach(obj => {\n        const objKeys = Object.keys(obj);\n        if (objKeys.includes('demandhint')) {\n          const currentDemandHint = obj.demandhint;\n          currentDemandHint.forEach(hint => {\n            if (Object.keys(hint).includes('hint')) {\n              const hintValue = this.richTextBuilder.build(hint.hint);\n              hintsObject.push({\n                id: hintsObject.length,\n                value: hintValue,\n              });\n            }\n          });\n        }\n      });\n    }\n    return hintsObject;\n  }\n\n  /** getSolutionExplanation(problemType)\n   * getSolutionExplanation takes a problemType. The problem type is used to determine where the\n   * text for the solution lies (sibling or child to warpping problem type tags).\n   * Using the XMLBuilder, the solution is built removing the redundant \"explanation\" that is\n   * appended for Studio styling purposes. The string version of the OLX is return.\n   * @param {string} problemType - string of the olx problem type\n   * @return {string} string of OLX\n   */\n  getSolutionExplanation(problemType) {\n    if (!_.has(this.problem, `${problemType}.solution`) && !_.has(this.problem, 'solution')) { return null; }\n    const [problemBody] = this.richTextProblem.filter(section => Object.keys(section).includes(problemType));\n    const [solutionBody] = problemBody[problemType].filter(section => Object.keys(section).includes('solution'));\n    const [divBody] = solutionBody.solution.filter(section => Object.keys(section).includes('div'));\n    const solutionArray = [];\n    if (divBody && divBody.div) {\n      divBody.div.forEach(tag => {\n        const tagText = _.get(Object.values(tag)[0][0], '#text', '');\n        if (tagText.toString().trim() !== 'Explanation') {\n          solutionArray.push(tag);\n        }\n      });\n    } else {\n      solutionBody.solution.forEach(tag => {\n        const tagText = _.get(Object.values(tag)[0][0], '#text', '');\n        if (tagText.toString().trim() !== 'Explanation') {\n          solutionArray.push(tag);\n        }\n      });\n    }\n    const solutionString = this.richTextBuilder.build(solutionArray);\n    return solutionString;\n  }\n\n  /** getFeedback(xmlElement)\n   * getFeedback takes xmlElement. The xmlElement is searched for the attribute correcthint.\n   * An empty string is returned if the parameter is not present. Otherwise a string of the feedback\n   * is returned.\n   * @param {object} xmlElement - object of answer attributes\n   * @return {string} string of feedback\n   */\n  getFeedback(xmlElement) {\n    if (_.isEmpty(xmlElement)) { return ''; }\n    const feedbackString = this.richTextBuilder.build(xmlElement);\n    return feedbackString;\n  }\n\n  /** getProblemType()\n   * The OLX saved to the class constuctor is parsed for a valid problem type (referencing problemKeys).\n   * For blank problems, it returns null. For OLX problems tags not defined in problemKeys or OLX with\n   * multiple problem tags, it returns advanced. For defined, single problem tag, it returns the\n   * associated problem type.\n   * @return {string} problem type\n   */\n  getProblemType() {\n    const problemKeys = Object.keys(this.problem);\n    const problemTypeKeys = problemKeys.filter(key => Object.values(ProblemTypeKeys).indexOf(key) !== -1);\n    if (problemTypeKeys.length === 0) {\n      // a blank problem is a problem which contains only `<problem></problem>` as it's olx.\n      // blank problems are not given types, so that a type may be selected.\n      if (problemKeys.length === 1 && problemKeys[0] === '#text' && this.problem[problemKeys[0]] === '') {\n        return null;\n      }\n      // if we have no matching problem type, the problem is advanced.\n      return ProblemTypeKeys.ADVANCED;\n    }\n    // make sure compound problems are treated as advanced\n    if ((problemTypeKeys.length > 1)\n      || (_.isArray(this.problem[problemTypeKeys[0]])\n        && this.problem[problemTypeKeys[0]].length > 1)) {\n      return ProblemTypeKeys.ADVANCED;\n    }\n    const problemType = problemTypeKeys[0];\n    return problemType;\n  }\n\n  /** getGeneralFeedback({ answers, problemType })\n   * getGeneralFeedback takes answers and problemType. The problem type determines if the problem should be checked\n   * for general feedback. The incorrect answers are checked to seee if all of their feedback is the same and\n   * returns the first incorrect answer's feedback if true. When conditions are unmet, it returns and empty string.\n   * @param {array} answers - array of answer objects\n   * @param {string} problemType - string of string of the olx problem type\n   * @return {string} text for incorrect feedback\n   */\n  getGeneralFeedback({ answers, problemType }) {\n    /* Feedback is Generalized for a Problem IFF:\n    1. The problem is of Types: Single Select or Dropdown.\n    2. All the problem's incorrect, if Selected answers are equivalent strings, and there is no other feedback.\n    */\n    if (problemType === ProblemTypeKeys.SINGLESELECT || problemType === ProblemTypeKeys.DROPDOWN) {\n      const firstIncorrectAnswerText = answers.find(answer => answer.correct === false)?.selectedFeedback;\n      const isAllIncorrectSelectedFeedbackTheSame = answers.every(answer => (answer.correct\n        ? true\n        : answer?.selectedFeedback === firstIncorrectAnswerText\n      ));\n      if (isAllIncorrectSelectedFeedbackTheSame) {\n        return firstIncorrectAnswerText;\n      }\n    }\n    return '';\n  }\n\n  getParsedOLXData() {\n    if (_.isEmpty(this.problem)) {\n      return {};\n    }\n\n    if (Object.keys(this.problem).some((key) => key.indexOf('@_') !== -1 && !settingsOlxAttributes.includes(key))) {\n      throw new Error('Misc Attributes asscoiated with problem, opening in advanced editor');\n    }\n\n    const problemType = this.getProblemType();\n\n    if (this.hasOLXAfterProblemTypeTag(problemType)) {\n      throw new Error(`OLX was found after the ${problemType} tags, opening in advanced editor`);\n    }\n\n    let answersObject = {};\n    let additionalAttributes = {};\n    let groupFeedbackList = [];\n    const hints = this.getHints();\n    const question = this.parseQuestions(problemType);\n    const solutionExplanation = this.getSolutionExplanation(problemType);\n    switch (problemType) {\n      case ProblemTypeKeys.DROPDOWN:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        answersObject = this.parseStringResponse();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        answersObject = this.parseNumericResponse();\n        break;\n      case ProblemTypeKeys.MULTISELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.ADVANCED:\n        return {\n          problemType,\n          settings: {},\n        };\n      default:\n        // if problem is unset, return null\n        return {};\n    }\n    const generalFeedback = this.getGeneralFeedback({ answers: answersObject.answers, problemType });\n    if (_.has(answersObject, 'additionalStringAttributes')) {\n      additionalAttributes = { ...answersObject.additionalStringAttributes };\n    }\n\n    if (_.has(answersObject, 'groupFeedbackList')) {\n      groupFeedbackList = answersObject.groupFeedbackList;\n    }\n    const { answers } = answersObject;\n    const settings = { hints };\n    if (ProblemTypeKeys.NUMERIC === problemType && _.has(answers[0], 'tolerance')) {\n      const toleranceValue = answers[0].tolerance;\n      if (!toleranceValue || toleranceValue.length === 0) {\n        settings.tolerance = { value: null, type: 'None' };\n      } else if (toleranceValue.includes('%')) {\n        settings.tolerance = { value: parseInt(toleranceValue.slice(0, -1)), type: 'Percent' };\n      } else {\n        settings.tolerance = { value: parseInt(toleranceValue), type: 'Number' };\n      }\n    } else {\n      settings.tolerance = { value: null, type: 'None' };\n    }\n    if (solutionExplanation) { settings.solutionExplanation = solutionExplanation; }\n\n    return {\n      question,\n      settings,\n      answers,\n      problemType,\n      additionalAttributes,\n      generalFeedback,\n      groupFeedbackList,\n    };\n  }\n}\n"],"mappings":"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"}