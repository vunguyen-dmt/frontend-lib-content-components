{"version":3,"file":"hooks.js","names":["_react","require","_lodashEs","_interopRequireDefault","_module","_interopRequireWildcard","_messages","_problem","_hooks2","_excluded","_excluded2","_excluded3","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","i","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","propertyIsEnumerable","sourceKeys","keys","ownKeys","object","enumerableOnly","symbols","filter","sym","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","state","exports","showAdvanced","val","useState","cardCollapsed","summary","showAttempts","attemptDisplayValue","showAdvancedSettingsCards","isAdvancedCardsVisible","setIsAdvancedCardsVisible","module","showAdvancedCards","showFullCard","hasExpandableTextArea","isCardCollapsibleOpen","setIsCardCollapsibleOpen","toggleCardCollapse","hintsCardHooks","hints","updateSettings","setSummary","message","messages","noHintSummary","values","useEffect","hintsNumber","hintSummary","count","handleAdd","newId","_","isEmpty","Math","max","map","id","modifiedHints","hintsRowHooks","handleChange","handleDelete","resetCardHooks","setReset","showResetButton","setResetTrue","setResetFalse","scoringCardHooks","scoring","defaultValue","loadedAttemptsNumber","attempts","number","isFinite","isNil","setAttemptDisplayValue","handleUnlimitedChange","event","isUnlimited","checked","unlimited","handleMaxAttemptChange","unlimitedAttempts","attemptNumber","parseInt","handleOnChange","newMaxAttempt","isNaN","handleWeightChange","weight","parseFloat","useAnswerSettings","showAnswer","setShowAttempts","numberOfAttemptsChoice","ShowAnswerTypesKeys","AFTER_SOME_NUMBER_OF_ATTEMPTS","AFTER_ALL_ATTEMPTS","AFTER_ALL_ATTEMPTS_OR_CORRECT","includes","on","handleShowAnswerChange","handleAttemptsChange","afterAttempts","timerCardHooks","time","timeBetween","typeRowHooks","_ref","answers","blockTitle","correctAnswerCount","problemType","setBlockTitle","typeKey","updateField","updateAnswer","clearPreviouslySelectedAnswers","currentAnswerTitles","_fetchEditorContent","fetchEditorContent","format","selectedFeedback","unselectedFeedback","editorContent","RichTextProblems","answer","title","correct","updateAnswersToCorrect","_fetchEditorContent2","convertToPlainText","_fetchEditorContent3","onClick","ProblemTypeKeys","TEXTINPUT","DROPDOWN","NUMERIC","ProblemTypes","confirmSwitchToAdvancedEditor","_ref2","switchToAdvancedEditor","setConfirmOpen","window","scrollTo","top","behavior"],"sources":["../../../../../../../src/editors/containers/ProblemEditor/components/EditProblemView/SettingsWidget/hooks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport _ from 'lodash-es';\nimport * as module from './hooks';\nimport messages from './messages';\nimport {\n  ProblemTypeKeys,\n  ProblemTypes,\n  RichTextProblems,\n  ShowAnswerTypesKeys,\n} from '../../../../../data/constants/problem';\nimport { fetchEditorContent } from '../hooks';\n\nexport const state = {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  showAdvanced: (val) => useState(val),\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  cardCollapsed: (val) => useState(val),\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  summary: (val) => useState(val),\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  showAttempts: (val) => useState(val),\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  attemptDisplayValue: (val) => useState(val),\n};\n\nexport const showAdvancedSettingsCards = () => {\n  const [isAdvancedCardsVisible, setIsAdvancedCardsVisible] = module.state.showAdvanced(false);\n  return {\n    isAdvancedCardsVisible,\n    showAdvancedCards: () => setIsAdvancedCardsVisible(true),\n  };\n};\n\nexport const showFullCard = (hasExpandableTextArea) => {\n  const [isCardCollapsibleOpen, setIsCardCollapsibleOpen] = module.state.cardCollapsed(hasExpandableTextArea);\n  return {\n    isCardCollapsibleOpen,\n    toggleCardCollapse: () => {\n      if (hasExpandableTextArea) {\n        setIsCardCollapsibleOpen(true);\n      } else {\n        setIsCardCollapsibleOpen(!isCardCollapsibleOpen);\n      }\n    },\n  };\n};\n\nexport const hintsCardHooks = (hints, updateSettings) => {\n  const [summary, setSummary] = module.state.summary({ message: messages.noHintSummary, values: {} });\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useEffect(() => {\n    const hintsNumber = hints.length;\n    if (hintsNumber === 0) {\n      setSummary({ message: messages.noHintSummary, values: {} });\n    } else {\n      setSummary({ message: messages.hintSummary, values: { hint: hints[0].value, count: (hintsNumber - 1) } });\n    }\n  }, [hints]);\n\n  const handleAdd = () => {\n    let newId = 0;\n    if (!_.isEmpty(hints)) {\n      newId = Math.max(...hints.map(hint => hint.id)) + 1;\n    }\n    const hint = { id: newId, value: '' };\n    const modifiedHints = [...hints, hint];\n    updateSettings({ hints: modifiedHints });\n  };\n\n  return {\n    summary,\n    handleAdd,\n  };\n};\n\nexport const hintsRowHooks = (id, hints, updateSettings) => {\n  const handleChange = (value) => {\n    const modifiedHints = hints.map(hint => {\n      if (hint.id === id) {\n        return { ...hint, value };\n      }\n      return hint;\n    });\n    updateSettings({ hints: modifiedHints });\n  };\n\n  const handleDelete = () => {\n    const modifiedHints = hints.filter((hint) => (hint.id !== id));\n    updateSettings({ hints: modifiedHints });\n  };\n\n  return {\n    handleChange,\n    handleDelete,\n  };\n};\n\nexport const resetCardHooks = (updateSettings) => {\n  const setReset = (value) => {\n    updateSettings({ showResetButton: value });\n  };\n\n  return {\n    setResetTrue: () => setReset(true),\n    setResetFalse: () => setReset(false),\n  };\n};\n\nexport const scoringCardHooks = (scoring, updateSettings, defaultValue) => {\n  let loadedAttemptsNumber = scoring.attempts.number;\n  if ((loadedAttemptsNumber === defaultValue || !_.isFinite(loadedAttemptsNumber)) && _.isFinite(defaultValue)) {\n    loadedAttemptsNumber = `${defaultValue} (Default)`;\n  } else if (loadedAttemptsNumber === defaultValue && _.isNil(defaultValue)) {\n    loadedAttemptsNumber = '';\n  }\n  const [attemptDisplayValue, setAttemptDisplayValue] = module.state.attemptDisplayValue(loadedAttemptsNumber);\n\n  const handleUnlimitedChange = (event) => {\n    const isUnlimited = event.target.checked;\n    if (isUnlimited) {\n      setAttemptDisplayValue('');\n      updateSettings({ scoring: { ...scoring, attempts: { number: null, unlimited: true } } });\n    } else {\n      updateSettings({ scoring: { ...scoring, attempts: { number: null, unlimited: false } } });\n    }\n  };\n\n  const handleMaxAttemptChange = (event) => {\n    let unlimitedAttempts = false;\n    let attemptNumber = parseInt(event.target.value);\n\n    if (!_.isFinite(attemptNumber) || attemptNumber === defaultValue) {\n      attemptNumber = null;\n      if (_.isFinite(defaultValue)) {\n        setAttemptDisplayValue(`${defaultValue} (Default)`);\n      } else {\n        setAttemptDisplayValue('');\n        unlimitedAttempts = true;\n      }\n    } else if (attemptNumber <= 0) {\n      attemptNumber = 0;\n    }\n\n    updateSettings({ scoring: { ...scoring, attempts: { number: attemptNumber, unlimited: unlimitedAttempts } } });\n  };\n\n  const handleOnChange = (event) => {\n    let newMaxAttempt = parseInt(event.target.value);\n    if (newMaxAttempt === defaultValue) {\n      newMaxAttempt = `${defaultValue} (Default)`;\n    } else if (_.isNaN(newMaxAttempt)) {\n      newMaxAttempt = '';\n    } else if (newMaxAttempt < 0) {\n      newMaxAttempt = 0;\n    }\n    setAttemptDisplayValue(newMaxAttempt);\n  };\n\n  const handleWeightChange = (event) => {\n    let weight = parseFloat(event.target.value);\n    if (_.isNaN(weight)) {\n      weight = 0;\n    }\n    updateSettings({ scoring: { ...scoring, weight } });\n  };\n\n  return {\n    attemptDisplayValue,\n    handleUnlimitedChange,\n    handleMaxAttemptChange,\n    handleOnChange,\n    handleWeightChange,\n  };\n};\n\nexport const useAnswerSettings = (showAnswer, updateSettings) => {\n  const [showAttempts, setShowAttempts] = module.state.showAttempts(false);\n\n  const numberOfAttemptsChoice = [\n    ShowAnswerTypesKeys.AFTER_SOME_NUMBER_OF_ATTEMPTS,\n    ShowAnswerTypesKeys.AFTER_ALL_ATTEMPTS,\n    ShowAnswerTypesKeys.AFTER_ALL_ATTEMPTS_OR_CORRECT,\n  ];\n\n  useEffect(() => {\n    setShowAttempts(_.includes(numberOfAttemptsChoice, showAnswer.on));\n  }, [showAttempts]);\n\n  const handleShowAnswerChange = (event) => {\n    const { value } = event.target;\n    setShowAttempts(_.includes(numberOfAttemptsChoice, value));\n    updateSettings({ showAnswer: { ...showAnswer, on: value } });\n  };\n\n  const handleAttemptsChange = (event) => {\n    let attempts = parseInt(event.target.value);\n    if (_.isNaN(attempts)) {\n      attempts = 0;\n    }\n    updateSettings({ showAnswer: { ...showAnswer, afterAttempts: attempts } });\n  };\n\n  return {\n    handleShowAnswerChange,\n    handleAttemptsChange,\n    showAttempts,\n  };\n};\n\nexport const timerCardHooks = (updateSettings) => ({\n  handleChange: (event) => {\n    let time = parseInt(event.target.value);\n    if (_.isNaN(time)) {\n      time = 0;\n    }\n    updateSettings({ timeBetween: time });\n  },\n});\n\nexport const typeRowHooks = ({\n  answers,\n  blockTitle,\n  correctAnswerCount,\n  problemType,\n  setBlockTitle,\n  typeKey,\n  updateField,\n  updateAnswer,\n}) => {\n  const clearPreviouslySelectedAnswers = () => {\n    let currentAnswerTitles;\n    const { selectedFeedback, unselectedFeedback, ...editorContent } = fetchEditorContent({ format: 'text' });\n    if (RichTextProblems.includes(problemType)) {\n      currentAnswerTitles = editorContent.answers;\n    }\n    answers.forEach(answer => {\n      const title = currentAnswerTitles?.[answer.id] || answer.title;\n      if (answer.correct) {\n        updateAnswer({\n          ...answer,\n          title,\n          selectedFeedback,\n          unselectedFeedback,\n          correct: false,\n        });\n      } else {\n        updateAnswer({\n          ...answer,\n          selectedFeedback,\n          unselectedFeedback,\n          title,\n        });\n      }\n    });\n  };\n\n  const updateAnswersToCorrect = () => {\n    let currentAnswerTitles;\n    const { selectedFeedback, unselectedFeedback, ...editorContent } = fetchEditorContent({ format: 'text' });\n    if (RichTextProblems.includes(problemType)) {\n      currentAnswerTitles = editorContent.answers;\n    }\n    answers.forEach(answer => {\n      const title = currentAnswerTitles ? currentAnswerTitles[answer.id] : answer.title;\n      updateAnswer({\n        ...answer,\n        title,\n        selectedFeedback,\n        unselectedFeedback,\n        correct: true,\n      });\n    });\n  };\n\n  const convertToPlainText = () => {\n    const { selectedFeedback, unselectedFeedback, ...editorContent } = fetchEditorContent({ format: 'text' });\n    const currentAnswerTitles = editorContent.answers;\n    answers.forEach(answer => {\n      updateAnswer({\n        ...answer,\n        selectedFeedback,\n        unselectedFeedback,\n        title: currentAnswerTitles[answer.id],\n      });\n    });\n  };\n\n  const onClick = () => {\n    // Numeric, text, and dropdowns cannot render HTML as answer values, so if switching from a single select\n    // or multi-select problem the rich text needs to covert to plain text\n    if (typeKey === ProblemTypeKeys.TEXTINPUT && RichTextProblems.includes(problemType)) {\n      convertToPlainText();\n    }\n    // Dropdown problems can only have one correct answer. When there is more than one correct answer\n    // from a previous problem type, the correct attribute for selected answers need to be set to false.\n    if (typeKey === ProblemTypeKeys.DROPDOWN) {\n      if (correctAnswerCount > 1) {\n        clearPreviouslySelectedAnswers();\n      } else if (RichTextProblems.includes(problemType)) {\n        convertToPlainText();\n      }\n    }\n    // Numeric input problems can only have correct answers. Switch all answers to correct when switching\n    // to numeric input.\n    if (typeKey === ProblemTypeKeys.NUMERIC) {\n      updateAnswersToCorrect();\n    }\n\n    if (blockTitle === ProblemTypes[problemType].title) {\n      setBlockTitle(ProblemTypes[typeKey].title);\n    }\n    updateField({ problemType: typeKey });\n  };\n  return {\n    onClick,\n  };\n};\n\nexport const confirmSwitchToAdvancedEditor = ({\n  switchToAdvancedEditor,\n  setConfirmOpen,\n}) => {\n  switchToAdvancedEditor();\n  setConfirmOpen(false);\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,SAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,OAAA,GAAAC,uBAAA,CAAAJ,OAAA;AACA,IAAAK,SAAA,GAAAH,sBAAA,CAAAF,OAAA;AACA,IAAAM,QAAA,GAAAN,OAAA;AAMA,IAAAO,OAAA,GAAAP,OAAA;AAA8C,MAAAQ,SAAA;EAAAC,UAAA;EAAAC,UAAA;AAAA,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAR,wBAAAY,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAAA,SAAApB,uBAAAc,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAAA,SAAAiB,yBAAAC,MAAA,EAAAC,QAAA,QAAAD,MAAA,yBAAAE,MAAA,GAAAC,6BAAA,CAAAH,MAAA,EAAAC,QAAA,OAAAR,GAAA,EAAAW,CAAA,MAAAd,MAAA,CAAAe,qBAAA,QAAAC,gBAAA,GAAAhB,MAAA,CAAAe,qBAAA,CAAAL,MAAA,QAAAI,CAAA,MAAAA,CAAA,GAAAE,gBAAA,CAAAC,MAAA,EAAAH,CAAA,MAAAX,GAAA,GAAAa,gBAAA,CAAAF,CAAA,OAAAH,QAAA,CAAAO,OAAA,CAAAf,GAAA,uBAAAH,MAAA,CAAAI,SAAA,CAAAe,oBAAA,CAAAb,IAAA,CAAAI,MAAA,EAAAP,GAAA,aAAAS,MAAA,CAAAT,GAAA,IAAAO,MAAA,CAAAP,GAAA,cAAAS,MAAA;AAAA,SAAAC,8BAAAH,MAAA,EAAAC,QAAA,QAAAD,MAAA,yBAAAE,MAAA,WAAAQ,UAAA,GAAApB,MAAA,CAAAqB,IAAA,CAAAX,MAAA,OAAAP,GAAA,EAAAW,CAAA,OAAAA,CAAA,MAAAA,CAAA,GAAAM,UAAA,CAAAH,MAAA,EAAAH,CAAA,MAAAX,GAAA,GAAAiB,UAAA,CAAAN,CAAA,OAAAH,QAAA,CAAAO,OAAA,CAAAf,GAAA,kBAAAS,MAAA,CAAAT,GAAA,IAAAO,MAAA,CAAAP,GAAA,YAAAS,MAAA;AAAA,SAAAU,QAAAC,MAAA,EAAAC,cAAA,QAAAH,IAAA,GAAArB,MAAA,CAAAqB,IAAA,CAAAE,MAAA,OAAAvB,MAAA,CAAAe,qBAAA,QAAAU,OAAA,GAAAzB,MAAA,CAAAe,qBAAA,CAAAQ,MAAA,GAAAC,cAAA,KAAAC,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAA3B,MAAA,CAAAE,wBAAA,CAAAqB,MAAA,EAAAI,GAAA,EAAAC,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAI,OAAA,YAAAJ,IAAA;AAAA,SAAAU,cAAAnB,MAAA,aAAAE,CAAA,MAAAA,CAAA,GAAAkB,SAAA,CAAAf,MAAA,EAAAH,CAAA,UAAAJ,MAAA,WAAAsB,SAAA,CAAAlB,CAAA,IAAAkB,SAAA,CAAAlB,CAAA,QAAAA,CAAA,OAAAQ,OAAA,CAAAtB,MAAA,CAAAU,MAAA,OAAAuB,OAAA,WAAA9B,GAAA,IAAA+B,eAAA,CAAAtB,MAAA,EAAAT,GAAA,EAAAO,MAAA,CAAAP,GAAA,SAAAH,MAAA,CAAAmC,yBAAA,GAAAnC,MAAA,CAAAoC,gBAAA,CAAAxB,MAAA,EAAAZ,MAAA,CAAAmC,yBAAA,CAAAzB,MAAA,KAAAY,OAAA,CAAAtB,MAAA,CAAAU,MAAA,GAAAuB,OAAA,WAAA9B,GAAA,IAAAH,MAAA,CAAAC,cAAA,CAAAW,MAAA,EAAAT,GAAA,EAAAH,MAAA,CAAAE,wBAAA,CAAAQ,MAAA,EAAAP,GAAA,iBAAAS,MAAA;AAAA,SAAAsB,gBAAA1C,GAAA,EAAAW,GAAA,EAAAkC,KAAA,IAAAlC,GAAA,GAAAmC,cAAA,CAAAnC,GAAA,OAAAA,GAAA,IAAAX,GAAA,IAAAQ,MAAA,CAAAC,cAAA,CAAAT,GAAA,EAAAW,GAAA,IAAAkC,KAAA,EAAAA,KAAA,EAAAT,UAAA,QAAAW,YAAA,QAAAC,QAAA,oBAAAhD,GAAA,CAAAW,GAAA,IAAAkC,KAAA,WAAA7C,GAAA;AAAA,SAAA8C,eAAAG,GAAA,QAAAtC,GAAA,GAAAuC,YAAA,CAAAD,GAAA,2BAAAtC,GAAA,gBAAAA,GAAA,GAAAwC,MAAA,CAAAxC,GAAA;AAAA,SAAAuC,aAAAE,KAAA,EAAAC,IAAA,eAAAD,KAAA,iBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA,OAAAF,IAAA,KAAAG,SAAA,QAAAC,GAAA,GAAAJ,IAAA,CAAAxC,IAAA,CAAAsC,KAAA,EAAAC,IAAA,2BAAAK,GAAA,sBAAAA,GAAA,YAAAC,SAAA,4DAAAN,IAAA,gBAAAF,MAAA,GAAAS,MAAA,EAAAR,KAAA;AAEvC,MAAMS,KAAK,GAAAC,OAAA,CAAAD,KAAA,GAAG;EACnB;EACAE,YAAY,EAAGC,GAAG,IAAK,IAAAC,eAAQ,EAACD,GAAG,CAAC;EACpC;EACAE,aAAa,EAAGF,GAAG,IAAK,IAAAC,eAAQ,EAACD,GAAG,CAAC;EACrC;EACAG,OAAO,EAAGH,GAAG,IAAK,IAAAC,eAAQ,EAACD,GAAG,CAAC;EAC/B;EACAI,YAAY,EAAGJ,GAAG,IAAK,IAAAC,eAAQ,EAACD,GAAG,CAAC;EACpC;EACAK,mBAAmB,EAAGL,GAAG,IAAK,IAAAC,eAAQ,EAACD,GAAG;AAC5C,CAAC;AAEM,MAAMM,yBAAyB,GAAGA,CAAA,KAAM;EAC7C,MAAM,CAACC,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGC,OAAM,CAACZ,KAAK,CAACE,YAAY,CAAC,KAAK,CAAC;EAC5F,OAAO;IACLQ,sBAAsB;IACtBG,iBAAiB,EAAEA,CAAA,KAAMF,yBAAyB,CAAC,IAAI;EACzD,CAAC;AACH,CAAC;AAACV,OAAA,CAAAQ,yBAAA,GAAAA,yBAAA;AAEK,MAAMK,YAAY,GAAIC,qBAAqB,IAAK;EACrD,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGL,OAAM,CAACZ,KAAK,CAACK,aAAa,CAACU,qBAAqB,CAAC;EAC3G,OAAO;IACLC,qBAAqB;IACrBE,kBAAkB,EAAEA,CAAA,KAAM;MACxB,IAAIH,qBAAqB,EAAE;QACzBE,wBAAwB,CAAC,IAAI,CAAC;MAChC,CAAC,MAAM;QACLA,wBAAwB,CAAC,CAACD,qBAAqB,CAAC;MAClD;IACF;EACF,CAAC;AACH,CAAC;AAACf,OAAA,CAAAa,YAAA,GAAAA,YAAA;AAEK,MAAMK,cAAc,GAAGA,CAACC,KAAK,EAAEC,cAAc,KAAK;EACvD,MAAM,CAACf,OAAO,EAAEgB,UAAU,CAAC,GAAGV,OAAM,CAACZ,KAAK,CAACM,OAAO,CAAC;IAAEiB,OAAO,EAAEC,iBAAQ,CAACC,aAAa;IAAEC,MAAM,EAAE,CAAC;EAAE,CAAC,CAAC;;EAEnG;EACA,IAAAC,gBAAS,EAAC,MAAM;IACd,MAAMC,WAAW,GAAGR,KAAK,CAACxD,MAAM;IAChC,IAAIgE,WAAW,KAAK,CAAC,EAAE;MACrBN,UAAU,CAAC;QAAEC,OAAO,EAAEC,iBAAQ,CAACC,aAAa;QAAEC,MAAM,EAAE,CAAC;MAAE,CAAC,CAAC;IAC7D,CAAC,MAAM;MACLJ,UAAU,CAAC;QAAEC,OAAO,EAAEC,iBAAQ,CAACK,WAAW;QAAEH,MAAM,EAAE;UAAElC,IAAI,EAAE4B,KAAK,CAAC,CAAC,CAAC,CAACpC,KAAK;UAAE8C,KAAK,EAAGF,WAAW,GAAG;QAAG;MAAE,CAAC,CAAC;IAC3G;EACF,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;EAEX,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIC,KAAK,GAAG,CAAC;IACb,IAAI,CAACC,iBAAC,CAACC,OAAO,CAACd,KAAK,CAAC,EAAE;MACrBY,KAAK,GAAGG,IAAI,CAACC,GAAG,CAAC,GAAGhB,KAAK,CAACiB,GAAG,CAAC7C,IAAI,IAAIA,IAAI,CAAC8C,EAAE,CAAC,CAAC,GAAG,CAAC;IACrD;IACA,MAAM9C,IAAI,GAAG;MAAE8C,EAAE,EAAEN,KAAK;MAAEhD,KAAK,EAAE;IAAG,CAAC;IACrC,MAAMuD,aAAa,GAAG,CAAC,GAAGnB,KAAK,EAAE5B,IAAI,CAAC;IACtC6B,cAAc,CAAC;MAAED,KAAK,EAAEmB;IAAc,CAAC,CAAC;EAC1C,CAAC;EAED,OAAO;IACLjC,OAAO;IACPyB;EACF,CAAC;AACH,CAAC;AAAC9B,OAAA,CAAAkB,cAAA,GAAAA,cAAA;AAEK,MAAMqB,aAAa,GAAGA,CAACF,EAAE,EAAElB,KAAK,EAAEC,cAAc,KAAK;EAC1D,MAAMoB,YAAY,GAAIzD,KAAK,IAAK;IAC9B,MAAMuD,aAAa,GAAGnB,KAAK,CAACiB,GAAG,CAAC7C,IAAI,IAAI;MACtC,IAAIA,IAAI,CAAC8C,EAAE,KAAKA,EAAE,EAAE;QAClB,OAAA5D,aAAA,CAAAA,aAAA,KAAYc,IAAI;UAAER;QAAK;MACzB;MACA,OAAOQ,IAAI;IACb,CAAC,CAAC;IACF6B,cAAc,CAAC;MAAED,KAAK,EAAEmB;IAAc,CAAC,CAAC;EAC1C,CAAC;EAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMH,aAAa,GAAGnB,KAAK,CAAC/C,MAAM,CAAEmB,IAAI,IAAMA,IAAI,CAAC8C,EAAE,KAAKA,EAAG,CAAC;IAC9DjB,cAAc,CAAC;MAAED,KAAK,EAAEmB;IAAc,CAAC,CAAC;EAC1C,CAAC;EAED,OAAO;IACLE,YAAY;IACZC;EACF,CAAC;AACH,CAAC;AAACzC,OAAA,CAAAuC,aAAA,GAAAA,aAAA;AAEK,MAAMG,cAAc,GAAItB,cAAc,IAAK;EAChD,MAAMuB,QAAQ,GAAI5D,KAAK,IAAK;IAC1BqC,cAAc,CAAC;MAAEwB,eAAe,EAAE7D;IAAM,CAAC,CAAC;EAC5C,CAAC;EAED,OAAO;IACL8D,YAAY,EAAEA,CAAA,KAAMF,QAAQ,CAAC,IAAI,CAAC;IAClCG,aAAa,EAAEA,CAAA,KAAMH,QAAQ,CAAC,KAAK;EACrC,CAAC;AACH,CAAC;AAAC3C,OAAA,CAAA0C,cAAA,GAAAA,cAAA;AAEK,MAAMK,gBAAgB,GAAGA,CAACC,OAAO,EAAE5B,cAAc,EAAE6B,YAAY,KAAK;EACzE,IAAIC,oBAAoB,GAAGF,OAAO,CAACG,QAAQ,CAACC,MAAM;EAClD,IAAI,CAACF,oBAAoB,KAAKD,YAAY,IAAI,CAACjB,iBAAC,CAACqB,QAAQ,CAACH,oBAAoB,CAAC,KAAKlB,iBAAC,CAACqB,QAAQ,CAACJ,YAAY,CAAC,EAAE;IAC5GC,oBAAoB,GAAI,GAAED,YAAa,YAAW;EACpD,CAAC,MAAM,IAAIC,oBAAoB,KAAKD,YAAY,IAAIjB,iBAAC,CAACsB,KAAK,CAACL,YAAY,CAAC,EAAE;IACzEC,oBAAoB,GAAG,EAAE;EAC3B;EACA,MAAM,CAAC3C,mBAAmB,EAAEgD,sBAAsB,CAAC,GAAG5C,OAAM,CAACZ,KAAK,CAACQ,mBAAmB,CAAC2C,oBAAoB,CAAC;EAE5G,MAAMM,qBAAqB,GAAIC,KAAK,IAAK;IACvC,MAAMC,WAAW,GAAGD,KAAK,CAACnG,MAAM,CAACqG,OAAO;IACxC,IAAID,WAAW,EAAE;MACfH,sBAAsB,CAAC,EAAE,CAAC;MAC1BnC,cAAc,CAAC;QAAE4B,OAAO,EAAAvE,aAAA,CAAAA,aAAA,KAAOuE,OAAO;UAAEG,QAAQ,EAAE;YAAEC,MAAM,EAAE,IAAI;YAAEQ,SAAS,EAAE;UAAK;QAAC;MAAG,CAAC,CAAC;IAC1F,CAAC,MAAM;MACLxC,cAAc,CAAC;QAAE4B,OAAO,EAAAvE,aAAA,CAAAA,aAAA,KAAOuE,OAAO;UAAEG,QAAQ,EAAE;YAAEC,MAAM,EAAE,IAAI;YAAEQ,SAAS,EAAE;UAAM;QAAC;MAAG,CAAC,CAAC;IAC3F;EACF,CAAC;EAED,MAAMC,sBAAsB,GAAIJ,KAAK,IAAK;IACxC,IAAIK,iBAAiB,GAAG,KAAK;IAC7B,IAAIC,aAAa,GAAGC,QAAQ,CAACP,KAAK,CAACnG,MAAM,CAACyB,KAAK,CAAC;IAEhD,IAAI,CAACiD,iBAAC,CAACqB,QAAQ,CAACU,aAAa,CAAC,IAAIA,aAAa,KAAKd,YAAY,EAAE;MAChEc,aAAa,GAAG,IAAI;MACpB,IAAI/B,iBAAC,CAACqB,QAAQ,CAACJ,YAAY,CAAC,EAAE;QAC5BM,sBAAsB,CAAE,GAAEN,YAAa,YAAW,CAAC;MACrD,CAAC,MAAM;QACLM,sBAAsB,CAAC,EAAE,CAAC;QAC1BO,iBAAiB,GAAG,IAAI;MAC1B;IACF,CAAC,MAAM,IAAIC,aAAa,IAAI,CAAC,EAAE;MAC7BA,aAAa,GAAG,CAAC;IACnB;IAEA3C,cAAc,CAAC;MAAE4B,OAAO,EAAAvE,aAAA,CAAAA,aAAA,KAAOuE,OAAO;QAAEG,QAAQ,EAAE;UAAEC,MAAM,EAAEW,aAAa;UAAEH,SAAS,EAAEE;QAAkB;MAAC;IAAG,CAAC,CAAC;EAChH,CAAC;EAED,MAAMG,cAAc,GAAIR,KAAK,IAAK;IAChC,IAAIS,aAAa,GAAGF,QAAQ,CAACP,KAAK,CAACnG,MAAM,CAACyB,KAAK,CAAC;IAChD,IAAImF,aAAa,KAAKjB,YAAY,EAAE;MAClCiB,aAAa,GAAI,GAAEjB,YAAa,YAAW;IAC7C,CAAC,MAAM,IAAIjB,iBAAC,CAACmC,KAAK,CAACD,aAAa,CAAC,EAAE;MACjCA,aAAa,GAAG,EAAE;IACpB,CAAC,MAAM,IAAIA,aAAa,GAAG,CAAC,EAAE;MAC5BA,aAAa,GAAG,CAAC;IACnB;IACAX,sBAAsB,CAACW,aAAa,CAAC;EACvC,CAAC;EAED,MAAME,kBAAkB,GAAIX,KAAK,IAAK;IACpC,IAAIY,MAAM,GAAGC,UAAU,CAACb,KAAK,CAACnG,MAAM,CAACyB,KAAK,CAAC;IAC3C,IAAIiD,iBAAC,CAACmC,KAAK,CAACE,MAAM,CAAC,EAAE;MACnBA,MAAM,GAAG,CAAC;IACZ;IACAjD,cAAc,CAAC;MAAE4B,OAAO,EAAAvE,aAAA,CAAAA,aAAA,KAAOuE,OAAO;QAAEqB;MAAM;IAAG,CAAC,CAAC;EACrD,CAAC;EAED,OAAO;IACL9D,mBAAmB;IACnBiD,qBAAqB;IACrBK,sBAAsB;IACtBI,cAAc;IACdG;EACF,CAAC;AACH,CAAC;AAACpE,OAAA,CAAA+C,gBAAA,GAAAA,gBAAA;AAEK,MAAMwB,iBAAiB,GAAGA,CAACC,UAAU,EAAEpD,cAAc,KAAK;EAC/D,MAAM,CAACd,YAAY,EAAEmE,eAAe,CAAC,GAAG9D,OAAM,CAACZ,KAAK,CAACO,YAAY,CAAC,KAAK,CAAC;EAExE,MAAMoE,sBAAsB,GAAG,CAC7BC,4BAAmB,CAACC,6BAA6B,EACjDD,4BAAmB,CAACE,kBAAkB,EACtCF,4BAAmB,CAACG,6BAA6B,CAClD;EAED,IAAApD,gBAAS,EAAC,MAAM;IACd+C,eAAe,CAACzC,iBAAC,CAAC+C,QAAQ,CAACL,sBAAsB,EAAEF,UAAU,CAACQ,EAAE,CAAC,CAAC;EACpE,CAAC,EAAE,CAAC1E,YAAY,CAAC,CAAC;EAElB,MAAM2E,sBAAsB,GAAIxB,KAAK,IAAK;IACxC,MAAM;MAAE1E;IAAM,CAAC,GAAG0E,KAAK,CAACnG,MAAM;IAC9BmH,eAAe,CAACzC,iBAAC,CAAC+C,QAAQ,CAACL,sBAAsB,EAAE3F,KAAK,CAAC,CAAC;IAC1DqC,cAAc,CAAC;MAAEoD,UAAU,EAAA/F,aAAA,CAAAA,aAAA,KAAO+F,UAAU;QAAEQ,EAAE,EAAEjG;MAAK;IAAG,CAAC,CAAC;EAC9D,CAAC;EAED,MAAMmG,oBAAoB,GAAIzB,KAAK,IAAK;IACtC,IAAIN,QAAQ,GAAGa,QAAQ,CAACP,KAAK,CAACnG,MAAM,CAACyB,KAAK,CAAC;IAC3C,IAAIiD,iBAAC,CAACmC,KAAK,CAAChB,QAAQ,CAAC,EAAE;MACrBA,QAAQ,GAAG,CAAC;IACd;IACA/B,cAAc,CAAC;MAAEoD,UAAU,EAAA/F,aAAA,CAAAA,aAAA,KAAO+F,UAAU;QAAEW,aAAa,EAAEhC;MAAQ;IAAG,CAAC,CAAC;EAC5E,CAAC;EAED,OAAO;IACL8B,sBAAsB;IACtBC,oBAAoB;IACpB5E;EACF,CAAC;AACH,CAAC;AAACN,OAAA,CAAAuE,iBAAA,GAAAA,iBAAA;AAEK,MAAMa,cAAc,GAAIhE,cAAc,KAAM;EACjDoB,YAAY,EAAGiB,KAAK,IAAK;IACvB,IAAI4B,IAAI,GAAGrB,QAAQ,CAACP,KAAK,CAACnG,MAAM,CAACyB,KAAK,CAAC;IACvC,IAAIiD,iBAAC,CAACmC,KAAK,CAACkB,IAAI,CAAC,EAAE;MACjBA,IAAI,GAAG,CAAC;IACV;IACAjE,cAAc,CAAC;MAAEkE,WAAW,EAAED;IAAK,CAAC,CAAC;EACvC;AACF,CAAC,CAAC;AAACrF,OAAA,CAAAoF,cAAA,GAAAA,cAAA;AAEI,MAAMG,YAAY,GAAGC,IAAA,IAStB;EAAA,IATuB;IAC3BC,OAAO;IACPC,UAAU;IACVC,kBAAkB;IAClBC,WAAW;IACXC,aAAa;IACbC,OAAO;IACPC,WAAW;IACXC;EACF,CAAC,GAAAR,IAAA;EACC,MAAMS,8BAA8B,GAAGA,CAAA,KAAM;IAC3C,IAAIC,mBAAmB;IACvB,MAAAC,mBAAA,GAAmE,IAAAC,0BAAkB,EAAC;QAAEC,MAAM,EAAE;MAAO,CAAC,CAAC;MAAnG;QAAEC,gBAAgB;QAAEC;MAAqC,CAAC,GAAAJ,mBAAA;MAAfK,aAAa,GAAArJ,wBAAA,CAAAgJ,mBAAA,EAAAzK,SAAA;IAC9D,IAAI+K,yBAAgB,CAAC1B,QAAQ,CAACa,WAAW,CAAC,EAAE;MAC1CM,mBAAmB,GAAGM,aAAa,CAACf,OAAO;IAC7C;IACAA,OAAO,CAAC9G,OAAO,CAAC+H,MAAM,IAAI;MACxB,MAAMC,KAAK,GAAGT,mBAAmB,GAAGQ,MAAM,CAACrE,EAAE,CAAC,IAAIqE,MAAM,CAACC,KAAK;MAC9D,IAAID,MAAM,CAACE,OAAO,EAAE;QAClBZ,YAAY,CAAAvH,aAAA,CAAAA,aAAA,KACPiI,MAAM;UACTC,KAAK;UACLL,gBAAgB;UAChBC,kBAAkB;UAClBK,OAAO,EAAE;QAAK,EACf,CAAC;MACJ,CAAC,MAAM;QACLZ,YAAY,CAAAvH,aAAA,CAAAA,aAAA,KACPiI,MAAM;UACTJ,gBAAgB;UAChBC,kBAAkB;UAClBI;QAAK,EACN,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIX,mBAAmB;IACvB,MAAAY,oBAAA,GAAmE,IAAAV,0BAAkB,EAAC;QAAEC,MAAM,EAAE;MAAO,CAAC,CAAC;MAAnG;QAAEC,gBAAgB;QAAEC;MAAqC,CAAC,GAAAO,oBAAA;MAAfN,aAAa,GAAArJ,wBAAA,CAAA2J,oBAAA,EAAAnL,UAAA;IAC9D,IAAI8K,yBAAgB,CAAC1B,QAAQ,CAACa,WAAW,CAAC,EAAE;MAC1CM,mBAAmB,GAAGM,aAAa,CAACf,OAAO;IAC7C;IACAA,OAAO,CAAC9G,OAAO,CAAC+H,MAAM,IAAI;MACxB,MAAMC,KAAK,GAAGT,mBAAmB,GAAGA,mBAAmB,CAACQ,MAAM,CAACrE,EAAE,CAAC,GAAGqE,MAAM,CAACC,KAAK;MACjFX,YAAY,CAAAvH,aAAA,CAAAA,aAAA,KACPiI,MAAM;QACTC,KAAK;QACLL,gBAAgB;QAChBC,kBAAkB;QAClBK,OAAO,EAAE;MAAI,EACd,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAAC,oBAAA,GAAmE,IAAAZ,0BAAkB,EAAC;QAAEC,MAAM,EAAE;MAAO,CAAC,CAAC;MAAnG;QAAEC,gBAAgB;QAAEC;MAAqC,CAAC,GAAAS,oBAAA;MAAfR,aAAa,GAAArJ,wBAAA,CAAA6J,oBAAA,EAAApL,UAAA;IAC9D,MAAMsK,mBAAmB,GAAGM,aAAa,CAACf,OAAO;IACjDA,OAAO,CAAC9G,OAAO,CAAC+H,MAAM,IAAI;MACxBV,YAAY,CAAAvH,aAAA,CAAAA,aAAA,KACPiI,MAAM;QACTJ,gBAAgB;QAChBC,kBAAkB;QAClBI,KAAK,EAAET,mBAAmB,CAACQ,MAAM,CAACrE,EAAE;MAAC,EACtC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAM4E,OAAO,GAAGA,CAAA,KAAM;IACpB;IACA;IACA,IAAInB,OAAO,KAAKoB,wBAAe,CAACC,SAAS,IAAIV,yBAAgB,CAAC1B,QAAQ,CAACa,WAAW,CAAC,EAAE;MACnFmB,kBAAkB,CAAC,CAAC;IACtB;IACA;IACA;IACA,IAAIjB,OAAO,KAAKoB,wBAAe,CAACE,QAAQ,EAAE;MACxC,IAAIzB,kBAAkB,GAAG,CAAC,EAAE;QAC1BM,8BAA8B,CAAC,CAAC;MAClC,CAAC,MAAM,IAAIQ,yBAAgB,CAAC1B,QAAQ,CAACa,WAAW,CAAC,EAAE;QACjDmB,kBAAkB,CAAC,CAAC;MACtB;IACF;IACA;IACA;IACA,IAAIjB,OAAO,KAAKoB,wBAAe,CAACG,OAAO,EAAE;MACvCR,sBAAsB,CAAC,CAAC;IAC1B;IAEA,IAAInB,UAAU,KAAK4B,qBAAY,CAAC1B,WAAW,CAAC,CAACe,KAAK,EAAE;MAClDd,aAAa,CAACyB,qBAAY,CAACxB,OAAO,CAAC,CAACa,KAAK,CAAC;IAC5C;IACAZ,WAAW,CAAC;MAAEH,WAAW,EAAEE;IAAQ,CAAC,CAAC;EACvC,CAAC;EACD,OAAO;IACLmB;EACF,CAAC;AACH,CAAC;AAACjH,OAAA,CAAAuF,YAAA,GAAAA,YAAA;AAEK,MAAMgC,6BAA6B,GAAGC,KAAA,IAGvC;EAAA,IAHwC;IAC5CC,sBAAsB;IACtBC;EACF,CAAC,GAAAF,KAAA;EACCC,sBAAsB,CAAC,CAAC;EACxBC,cAAc,CAAC,KAAK,CAAC;EACrBC,MAAM,CAACC,QAAQ,CAAC;IACdC,GAAG,EAAE,CAAC;IACNC,QAAQ,EAAE;EACZ,CAAC,CAAC;AACJ,CAAC;AAAC9H,OAAA,CAAAuH,6BAAA,GAAAA,6BAAA"}