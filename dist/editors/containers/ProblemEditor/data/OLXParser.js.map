{"version":3,"file":"OLXParser.js","names":["_fastXmlParser","require","_lodashEs","_interopRequireDefault","_problem","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","indexToLetterMap","Array","map","val","fromCharCode","exports","nonQuestionKeys","responseKeys","stripNonTextTags","_ref","tag","stripedTags","entries","_ref2","OLXParser","constructor","olxString","problem","questionData","richTextProblem","richTextOptions","ignoreAttributes","alwaysCreateTextNode","numberParseOptions","leadingZeros","hex","preserveOrder","processEntities","parserOptions","builderOptions","richTextBuilderOptions","richTextParser","XMLParser","parser","builder","XMLBuilder","richTextBuilder","parsedOLX","parse","richTextOLX","_","has","getPreservedAnswersAndFeedback","problemType","widgetName","option","problemBody","section","includes","isChoiceProblem","ProblemTypeKeys","NUMERIC","TEXTINPUT","preservedAnswers","correctAnswerFeedbackTag","incorrectAnswerFeedbackTag","problemBodyArr","subtag","tagNames","unshift","currentAnswerArr","answer","parseMultipleChoiceAnswers","answers","data","widget","get","permissableTags","some","Error","choice","isComplexAnswer","RichTextProblems","isEmpty","id","title","correct","isArray","element","index","preservedAnswer","preservedFeedback","build","eval","toLowerCase","feedback","getAnswerFeedback","groupFeedbackList","getGroupedFeedback","hintKey","feedbackKeys","feedbackArr","isSelectedFeedback","choices","groupFeedback","groupFeedbackArray","compoundhint","parsedFeedback","split","parseStringResponse","firstCorrectFeedback","stringresponse","answerFeedback","additionalStringAttributes","firstFeedback","getFeedback","selectedFeedback","additionalAnswerFeedback","stringEqualHintFeedback","additionalAnswer","newAnswer","indx","stringEqualHint","stringequalhint","type","textline","size","parseNumericResponse","numericalresponse","responseParam","defaultValue","isAnswerRange","test","parseQuestions","problemArray","questionArray","tagName","subTag","subTagName","questionString","replace","getHints","hintsObject","preservedProblem","objKeys","currentDemandHint","demandhint","hintValue","getSolutionExplanation","solution","pop","div","block","shift","solutionString","xmlElement","feedbackString","getProblemType","problemKeys","problemTypeKeys","values","indexOf","ADVANCED","getGeneralFeedback","_ref3","SINGLESELECT","DROPDOWN","firstIncorrectAnswerText","find","isAllIncorrectSelectedFeedbackTheSame","every","getParsedOLXData","answersObject","additionalAttributes","hints","question","solutionExplanation","MULTISELECT","settings","generalFeedback","toleranceValue","tolerance","parseInt","slice"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.js"],"sourcesContent":["// Parse OLX to JavaScript objects.\n/* eslint no-eval: 0 */\n\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport _ from 'lodash-es';\nimport { ProblemTypeKeys, RichTextProblems } from '../../../data/constants/problem';\n\nexport const indexToLetterMap = [...Array(26)].map((val, i) => String.fromCharCode(i + 65));\n\nexport const nonQuestionKeys = [\n  '@_answer',\n  '@_type',\n  'additional_answer',\n  'checkboxgroup',\n  'choicegroup',\n  'choiceresponse',\n  'correcthint',\n  'demandhint',\n  'formulaequationinput',\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optioninput',\n  'optionresponse',\n  'responseparam',\n  'solution',\n  'stringequalhint',\n  'stringresponse',\n  'textline',\n];\n\nexport const responseKeys = [\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optionresponse',\n  'stringresponse',\n  'choiceresponse',\n  'multiplechoiceresponse',\n  'truefalseresponse',\n  'optionresponse',\n  'numericalresponse',\n  'stringresponse',\n  'customresponse',\n  'symbolicresponse',\n  'coderesponse',\n  'externalresponse',\n  'formularesponse',\n  'schematicresponse',\n  'imageresponse',\n  'annotationresponse',\n  'choicetextresponse',\n];\n\nexport const stripNonTextTags = ({ input, tag }) => {\n  const stripedTags = {};\n  Object.entries(input).forEach(([key, value]) => {\n    if (key !== tag) {\n      stripedTags[key] = value;\n    }\n  });\n  return stripedTags;\n};\n\nexport class OLXParser {\n  constructor(olxString) {\n    this.problem = {};\n    this.questionData = {};\n    this.richTextProblem = {};\n    const richTextOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n      processEntities: false,\n    };\n    const parserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      processEntities: false,\n    };\n    const builderOptions = {\n      ignoreAttributes: false,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      processEntities: false,\n    };\n    const richTextBuilderOptions = {\n      ignoreAttributes: false,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n      processEntities: false,\n    };\n    // There are two versions of the parsed XLM because the fields using tinymce require the order\n    // of the parsed data to be preserved. However, all the other widgets need the data grouped by\n    // the wrapping tag.\n    const richTextParser = new XMLParser(richTextOptions);\n    const parser = new XMLParser(parserOptions);\n    this.builder = new XMLBuilder(builderOptions);\n    this.richTextBuilder = new XMLBuilder(richTextBuilderOptions);\n    this.parsedOLX = parser.parse(olxString);\n    this.richTextOLX = richTextParser.parse(olxString);\n    if (_.has(this.parsedOLX, 'problem')) {\n      this.problem = this.parsedOLX.problem;\n      this.questionData = this.richTextOLX[0].problem;\n      this.richTextProblem = this.richTextOLX[0].problem;\n    }\n  }\n\n  /** getPreservedAnswersAndFeedback(problemType, widgetName, option)\n   * getPreservedAnswersAndFeedback takes a problemType, widgetName, and a valid option. The\n   * olx for the given problem type and widget is parsed. Do to the structure of xml that is\n   * parsed with the prsereved attribute, the function has to loop through arrays of objects.\n   * The first for-loop checks for feedback tags and answer choices and appended to the\n   * preservedAnswers. The nested for loop checks for feedback and answer values inside the\n   * option (answer) tags.\n   * @param {string} problemType - string of the olx problem type\n   * @param {string} widgetName - string of the wrapping tag name\n   *                              (optioninput, choicegroup, checkboxgroup, additional_answer)\n   * @param {string} option - string of the type of answers (choice, option, correcthint, stringequalhint)\n   * @return {array} array containing answer objects and possibly an array of grouped feedback\n   */\n  getPreservedAnswersAndFeedback(problemType, widgetName, option) {\n    const [problemBody] = this.richTextProblem.filter(section => Object.keys(section).includes(problemType));\n    const isChoiceProblem = !([ProblemTypeKeys.NUMERIC, ProblemTypeKeys.TEXTINPUT].includes(problemType));\n    const preservedAnswers = [];\n    let correctAnswerFeedbackTag = option;\n    let incorrectAnswerFeedbackTag;\n    if (problemType === ProblemTypeKeys.TEXTINPUT) {\n      [correctAnswerFeedbackTag, incorrectAnswerFeedbackTag] = option;\n    }\n    const problemBodyArr = problemBody[problemType];\n    problemBodyArr.forEach(subtag => {\n      const tagNames = Object.keys(subtag);\n      if (!isChoiceProblem && tagNames.includes(correctAnswerFeedbackTag)) {\n        preservedAnswers.unshift(subtag[correctAnswerFeedbackTag]);\n      }\n      if (problemType === ProblemTypeKeys.TEXTINPUT && tagNames.includes(incorrectAnswerFeedbackTag)) {\n        preservedAnswers.push(subtag);\n      }\n      if (tagNames.includes(widgetName)) {\n        const currentAnswerArr = subtag[widgetName];\n        currentAnswerArr.forEach(answer => {\n          if (Object.keys(answer).includes(correctAnswerFeedbackTag)) {\n            preservedAnswers.push(answer[correctAnswerFeedbackTag]);\n          }\n        });\n      }\n    });\n    return preservedAnswers;\n  }\n\n  /** parseMultipleChoiceAnswers(problemType, widgetName, option)\n   * parseMultipleChoiceAnswers takes a problemType, widgetName, and a valid option. The\n   * olx for the given problem type and widget is parsed. Depending on the problem\n   * type, the title for an answer will be parsed differently because of single select and multiselect\n   * problems are rich text while dropdown answers are plain text. The rich text is parsed into an object\n   * and is converted back into a string before being added to the answer object. The parsing returns a\n   * data object with an array of answer objects. If the olx has grouped feedback, this will also be\n   * included in the data object.\n   * @param {string} problemType - string of the olx problem type\n   * @param {string} widgetName - string of the wrapping tag name (optioninput, choicegroup, checkboxgroup)\n   * @param {string} option - string of the type of answers (choice or option)\n   * @return {object} object containing an array of answer objects and possibly an array of grouped feedback\n   */\n  parseMultipleChoiceAnswers(problemType, widgetName, option) {\n    const preservedAnswers = this.getPreservedAnswersAndFeedback(\n      problemType,\n      widgetName,\n      option,\n    );\n    const answers = [];\n    let data = {};\n    const widget = _.get(this.problem, `${problemType}.${widgetName}`);\n    const permissableTags = ['choice', '@_type', 'compoundhint', 'option', '#text'];\n    if (_.keys(widget).some((tag) => !permissableTags.includes(tag))) {\n      throw new Error('Misc Tags, reverting to Advanced Editor');\n    }\n    const choice = _.get(widget, option);\n    const isComplexAnswer = RichTextProblems.includes(problemType);\n    if (_.isEmpty(choice)) {\n      answers.push(\n        {\n          id: indexToLetterMap[answers.length],\n          title: '',\n          correct: true,\n        },\n      );\n    } else if (_.isArray(choice)) {\n      choice.forEach((element, index) => {\n        const preservedAnswer = preservedAnswers[index].filter(answer => !Object.keys(answer).includes(`${option}hint`));\n        const preservedFeedback = preservedAnswers[index].filter(answer => Object.keys(answer).includes(`${option}hint`));\n        let title = element['#text'];\n\n        if (isComplexAnswer && preservedAnswer) {\n          title = this.richTextBuilder.build(preservedAnswer);\n        }\n        const correct = eval(element['@_correct'].toLowerCase());\n        const id = indexToLetterMap[index];\n        const feedback = this.getAnswerFeedback(preservedFeedback, `${option}hint`);\n        answers.push(\n          {\n            id,\n            correct,\n            title,\n            ...feedback,\n          },\n        );\n      });\n    } else {\n      const preservedAnswer = preservedAnswers[0].filter(answer => !Object.keys(answer).includes(`${option}hint`));\n      const preservedFeedback = preservedAnswers[0].filter(answer => Object.keys(answer).includes(`${option}hint`));\n      let title = choice['#text'];\n\n      if (isComplexAnswer && preservedAnswer) {\n        title = this.richTextBuilder.build(preservedAnswer);\n      }\n      const feedback = this.getAnswerFeedback(preservedFeedback, `${option}hint`);\n      answers.push({\n        correct: eval(choice['@_correct'].toLowerCase()),\n        id: indexToLetterMap[answers.length],\n        title,\n        ...feedback,\n      });\n    }\n    data = { answers };\n    const groupFeedbackList = this.getGroupedFeedback(widget);\n    if (groupFeedbackList.length) {\n      data = {\n        ...data,\n        groupFeedbackList,\n      };\n    }\n    return data;\n  }\n\n  /** getAnswerFeedback(preservedFeedback, hintKey)\n   * getAnswerFeedback takes preservedFeedback and a valid option. The preservedFeedback object\n   * is checked for selected and unselected feedback. The respective values are added to the\n   * feedback object. The feedback object is returned.\n   * @param {array} preservedFeedback - array of feedback objects\n   * @param {string} hintKey - string of the wrapping tag name (optionhint or choicehint)\n   * @return {object} object containing selected and unselected feedback\n   */\n  getAnswerFeedback(preservedFeedback, hintKey) {\n    const feedback = {};\n    let feedbackKeys = 'selectedFeedback';\n    if (_.isEmpty(preservedFeedback)) { return feedback; }\n\n    preservedFeedback.forEach((feedbackArr) => {\n      if (_.has(feedbackArr, hintKey)) {\n        if (_.has(feedbackArr, ':@') && _.has(feedbackArr[':@'], '@_selected')) {\n          const isSelectedFeedback = feedbackArr[':@']['@_selected'] === 'true';\n          feedbackKeys = isSelectedFeedback ? 'selectedFeedback' : 'unselectedFeedback';\n        }\n        feedback[feedbackKeys] = this.richTextBuilder.build(feedbackArr[hintKey]);\n      }\n    });\n    return feedback;\n  }\n\n  /** getGroupedFeedback(choices)\n   * getGroupedFeedback takes choices. The choices with the attribute compoundhint are parsed for\n   * the text value and the answers associated with the feedback. The groupFeedback array is returned.\n   * @param {object} choices - object of problem's subtags\n   * @return {array} array containing objects of feedback and associated answer ids\n   */\n  getGroupedFeedback(choices) {\n    const groupFeedback = [];\n    if (_.has(choices, 'compoundhint')) {\n      const groupFeedbackArray = choices.compoundhint;\n      if (_.isArray(groupFeedbackArray)) {\n        groupFeedbackArray.forEach((element) => {\n          const parsedFeedback = stripNonTextTags({ input: element, tag: '@_value' });\n          groupFeedback.push({\n            id: groupFeedback.length,\n            answers: element['@_value'].split(' '),\n            feedback: this.builder.build(parsedFeedback),\n          });\n        });\n      } else {\n        const parsedFeedback = stripNonTextTags({ input: groupFeedbackArray, tag: '@_value' });\n        groupFeedback.push({\n          id: groupFeedback.length,\n          answers: groupFeedbackArray['@_value'].split(' '),\n          feedback: this.builder.build(parsedFeedback),\n        });\n      }\n    }\n    return groupFeedback;\n  }\n\n  /** parseStringResponse()\n   * The OLX saved to the class constuctor is parsed for text input answers. There are two\n   * types of tags with the answer attribute, stringresponse (the problem wrapper) and\n   * additional_answer. Looping through each tag, the associated title and feedback are added\n   * to the answers object and appended to the answers array. The array returned in an object\n   * with the key \"answers\". The object also conatins additional attributes that belong to the\n   * string response tag.\n   * @return {object} object containing an array of answer objects and object of additionalStringAttributes\n   */\n  parseStringResponse() {\n    const [firstCorrectFeedback, ...preservedFeedback] = this.getPreservedAnswersAndFeedback(\n      ProblemTypeKeys.TEXTINPUT,\n      'additional_answer',\n      ['correcthint', 'stringequalhint'],\n    );\n    const { stringresponse } = this.problem;\n    const answers = [];\n    let answerFeedback = '';\n    let additionalStringAttributes = {};\n    let data = {};\n    const firstFeedback = this.getFeedback(firstCorrectFeedback);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: stringresponse['@_answer'],\n      correct: true,\n      selectedFeedback: firstFeedback,\n    });\n\n    const additionalAnswerFeedback = preservedFeedback.filter(feedback => _.isArray(feedback));\n    const stringEqualHintFeedback = preservedFeedback.filter(feedback => !_.isArray(feedback));\n\n    // Parsing additional_answer for string response.\n    const additionalAnswer = _.get(stringresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer, indx) => {\n        answerFeedback = this.getFeedback(additionalAnswerFeedback[indx]);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(additionalAnswerFeedback[0]);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // Parsing stringequalhint for string response.\n    const stringEqualHint = _.get(stringresponse, 'stringequalhint', []);\n    if (_.isArray(stringEqualHint)) {\n      stringEqualHint.forEach((newAnswer, indx) => {\n        answerFeedback = this.richTextBuilder.build(stringEqualHintFeedback[indx].stringequalhint);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: false,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.richTextBuilder.build(stringEqualHintFeedback[0].stringequalhint);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: stringEqualHint['@_answer'],\n        correct: false,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // TODO: Support multiple types.\n    additionalStringAttributes = {\n      type: _.get(stringresponse, '@_type'),\n      textline: {\n        size: _.get(stringresponse, 'textline.@_size'),\n      },\n    };\n\n    data = {\n      answers,\n      additionalStringAttributes,\n    };\n\n    return data;\n  }\n\n  /** parseNumericResponse()\n   * The OLX saved to the class constuctor is parsed for numeric answers. There are two\n   * types of tags for numeric answers, responseparam and additional_answer. Looping through\n   * each tag, the associated title and feedback and if the answer is an answer range are\n   * added to the answers object and appended to the answers array. The array returned in\n   * an object with the key \"answers\".\n   * @return {object} object containing an array of answer objects\n   */\n  parseNumericResponse() {\n    const [firstCorrectFeedback, ...preservedFeedback] = this.getPreservedAnswersAndFeedback(\n      ProblemTypeKeys.NUMERIC,\n      'additional_answer',\n      'correcthint',\n    );\n    const { numericalresponse } = this.problem;\n    let answerFeedback = '';\n    const answers = [];\n    let responseParam = {};\n    const feedback = this.getFeedback(firstCorrectFeedback);\n    if (_.has(numericalresponse, 'responseparam')) {\n      const type = _.get(numericalresponse, 'responseparam.@_type');\n      const defaultValue = _.get(numericalresponse, 'responseparam.@_default');\n      responseParam = {\n        [type]: defaultValue,\n      };\n    }\n    const isAnswerRange = /[([]\\d*,\\d*[)\\]]/gm.test(numericalresponse['@_answer']);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: numericalresponse['@_answer'],\n      correct: true,\n      selectedFeedback: feedback,\n      isAnswerRange,\n      ...responseParam,\n    });\n\n    // Parsing additional_answer for numerical response.\n    const additionalAnswer = _.get(numericalresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer, indx) => {\n        answerFeedback = this.getFeedback(preservedFeedback[indx]);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(preservedFeedback[0]);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n        isAnswerRange: false,\n      });\n    }\n    return { answers };\n  }\n\n  /** parseQuestions(problemType)\n   * parseQuestions takes a problemType. The problem type is used to determine where the\n   * text for the question lies (sibling or child to warpping problem type tags).\n   * Using the XMLBuilder, the question is built with its proper children (including label\n   * and description). The string version of the OLX is return, replacing the description\n   * tags with italicized tags for styling purposes.\n   * @param {string} problemType - string of the olx problem type\n   * @return {string} string of OLX\n   */\n  parseQuestions(problemType) {\n    const problemArray = _.get(this.questionData[0], problemType) || this.questionData;\n\n    const questionArray = [];\n    problemArray.forEach(tag => {\n      const tagName = Object.keys(tag)[0];\n      if (!nonQuestionKeys.includes(tagName)) {\n        if (tagName === 'script') {\n          throw new Error('Script Tag, reverting to Advanced Editor');\n        }\n        questionArray.push(tag);\n      } else if (responseKeys.includes(tagName)) {\n        /* <label> and <description> tags often are both valid olx as siblings or children of response type tags.\n         They, however, do belong in the question, so we append them to the question.\n        */\n        tag[tagName].forEach(subTag => {\n          const subTagName = Object.keys(subTag)[0];\n          if (subTagName === 'label' || subTagName === 'description') {\n            questionArray.push(subTag);\n          }\n        });\n      }\n    });\n    const questionString = this.richTextBuilder.build(questionArray);\n    return questionString.replace(/<description>/gm, '<em>').replace(/<\\/description>/gm, '</em>');\n  }\n\n  /** getHints()\n   * The OLX saved to the class constuctor is parsed for demand hint tags with hint subtags. An empty array is returned\n   * if there are no hints in the OLX. Otherwise the hint tag is parsed and appended to the hintsObject arrary. After\n   * going through all the hints the hintsObject array is returned.\n   * @return {array} array of hint objects\n   */\n  getHints() {\n    const hintsObject = [];\n    if (_.has(this.problem, 'demandhint.hint')) {\n      const preservedProblem = this.richTextProblem;\n      preservedProblem.forEach(obj => {\n        const objKeys = Object.keys(obj);\n        if (objKeys.includes('demandhint')) {\n          const currentDemandHint = obj.demandhint;\n          currentDemandHint.forEach(hint => {\n            const hintValue = this.richTextBuilder.build(hint.hint);\n            hintsObject.push({\n              id: hintsObject.length,\n              value: hintValue,\n            });\n          });\n        }\n      });\n    }\n    return hintsObject;\n  }\n\n  /** getSolutionExplanation(problemType)\n   * getSolutionExplanation takes a problemType. The problem type is used to determine where the\n   * text for the solution lies (sibling or child to warpping problem type tags).\n   * Using the XMLBuilder, the solution is built removing the redundant \"explanation\" that is\n   * appended for Studio styling purposes. The string version of the OLX is return.\n   * @param {string} problemType - string of the olx problem type\n   * @return {string} string of OLX\n   */\n  getSolutionExplanation(problemType) {\n    if (!_.has(this.problem, `${problemType}.solution`) && !_.has(this.problem, 'solution')) { return null; }\n    const [problemBody] = this.richTextProblem.filter(section => Object.keys(section).includes(problemType));\n    let { solution } = problemBody[problemType].pop();\n    const { div } = solution[0];\n    if (solution.length === 1 && div) {\n      div.forEach((block) => {\n        const [key] = Object.keys(block);\n        const [value] = block[key];\n        if ((key === 'p' || key === 'h2')\n          && (_.get(value, '#text', null) === 'Explanation')\n        ) {\n          div.shift();\n        }\n      });\n      solution = div;\n    }\n    const solutionString = this.richTextBuilder.build(solution);\n    return solutionString;\n  }\n\n  /** getFeedback(xmlElement)\n   * getFeedback takes xmlElement. The xmlElement is searched for the attribute correcthint.\n   * An empty string is returned if the parameter is not present. Otherwise a string of the feedback\n   * is returned.\n   * @param {object} xmlElement - object of answer attributes\n   * @return {string} string of feedback\n   */\n  getFeedback(xmlElement) {\n    if (_.isEmpty(xmlElement)) { return ''; }\n    const feedbackString = this.richTextBuilder.build(xmlElement);\n    return feedbackString;\n  }\n\n  /** getProblemType()\n   * The OLX saved to the class constuctor is parsed for a valid problem type (referencing problemKeys).\n   * For blank problems, it returns null. For OLX problems tags not defined in problemKeys or OLX with\n   * multiple problem tags, it returns advanced. For defined, single problem tag, it returns the\n   * associated problem type.\n   * @return {string} problem type\n   */\n  getProblemType() {\n    const problemKeys = Object.keys(this.problem);\n    const problemTypeKeys = problemKeys.filter(key => Object.values(ProblemTypeKeys).indexOf(key) !== -1);\n    if (problemTypeKeys.length === 0) {\n      // a blank problem is a problem which contains only `<problem></problem>` as it's olx.\n      // blank problems are not given types, so that a type may be selected.\n      if (problemKeys.length === 1 && problemKeys[0] === '#text' && this.problem[problemKeys[0]] === '') {\n        return null;\n      }\n      // if we have no matching problem type, the problem is advanced.\n      return ProblemTypeKeys.ADVANCED;\n    }\n    // make sure compound problems are treated as advanced\n    if ((problemTypeKeys.length > 1)\n      || (_.isArray(this.problem[problemTypeKeys[0]])\n        && this.problem[problemTypeKeys[0]].length > 1)) {\n      return ProblemTypeKeys.ADVANCED;\n    }\n    const problemType = problemTypeKeys[0];\n    return problemType;\n  }\n\n  /** getGeneralFeedback({ answers, problemType })\n   * getGeneralFeedback takes answers and problemType. The problem type determines if the problem should be checked\n   * for general feedback. The incorrect answers are checked to seee if all of their feedback is the same and\n   * returns the first incorrect answer's feedback if true. When conditions are unmet, it returns and empty string.\n   * @param {array} answers - array of answer objects\n   * @param {string} problemType - string of string of the olx problem type\n   * @return {string} text for incorrect feedback\n   */\n  getGeneralFeedback({ answers, problemType }) {\n    /* Feedback is Generalized for a Problem IFF:\n    1. The problem is of Types: Single Select or Dropdown.\n    2. All the problem's incorrect, if Selected answers are equivalent strings, and there is no other feedback.\n    */\n    if (problemType === ProblemTypeKeys.SINGLESELECT || problemType === ProblemTypeKeys.DROPDOWN) {\n      const firstIncorrectAnswerText = answers.find(answer => answer.correct === false)?.selectedFeedback;\n      const isAllIncorrectSelectedFeedbackTheSame = answers.every(answer => (answer.correct\n        ? true\n        : answer?.selectedFeedback === firstIncorrectAnswerText\n      ));\n      if (isAllIncorrectSelectedFeedbackTheSame) {\n        return firstIncorrectAnswerText;\n      }\n    }\n    return '';\n  }\n\n  getParsedOLXData() {\n    if (_.isEmpty(this.problem)) {\n      return {};\n    }\n\n    if (Object.keys(this.problem).some((key) => key.indexOf('@_') !== -1)) {\n      throw new Error('Misc Attributes asscoiated with problem, opening in advanced editor');\n    }\n\n    let answersObject = {};\n    let additionalAttributes = {};\n    let groupFeedbackList = [];\n    const problemType = this.getProblemType();\n    const hints = this.getHints();\n    const question = this.parseQuestions(problemType);\n    const solutionExplanation = this.getSolutionExplanation(problemType);\n\n    switch (problemType) {\n      case ProblemTypeKeys.DROPDOWN:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        answersObject = this.parseStringResponse();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        answersObject = this.parseNumericResponse();\n        break;\n      case ProblemTypeKeys.MULTISELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.ADVANCED:\n        return {\n          problemType,\n          settings: {},\n        };\n      default:\n        // if problem is unset, return null\n        return {};\n    }\n    const generalFeedback = this.getGeneralFeedback({ answers: answersObject.answers, problemType });\n    if (_.has(answersObject, 'additionalStringAttributes')) {\n      additionalAttributes = { ...answersObject.additionalStringAttributes };\n    }\n\n    if (_.has(answersObject, 'groupFeedbackList')) {\n      groupFeedbackList = answersObject.groupFeedbackList;\n    }\n    const { answers } = answersObject;\n    const settings = { hints };\n    if (ProblemTypeKeys.NUMERIC === problemType && _.has(answers[0], 'tolerance')) {\n      const toleranceValue = answers[0].tolerance;\n      if (!toleranceValue || toleranceValue.length === 0) {\n        settings.tolerance = { value: null, type: 'None' };\n      } else if (toleranceValue.includes('%')) {\n        settings.tolerance = { value: parseInt(toleranceValue.slice(0, -1)), type: 'Percent' };\n      } else {\n        settings.tolerance = { value: parseInt(toleranceValue), type: 'Number' };\n      }\n    } else {\n      settings.tolerance = { value: null, type: 'None' };\n    }\n    if (solutionExplanation) { settings.solutionExplanation = solutionExplanation; }\n\n    return {\n      question,\n      settings,\n      answers,\n      problemType,\n      additionalAttributes,\n      generalFeedback,\n      groupFeedbackList,\n    };\n  }\n}\n"],"mappings":"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"}