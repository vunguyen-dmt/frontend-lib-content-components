{"version":3,"file":"OLXParser.test.js","names":["_OLXParser","require","_olxTestData","_problem","blankOlxParser","OLXParser","blankProblemOLX","rawOLX","checkboxOlxParser","checkboxesOLXWithFeedbackAndHintsOLX","numericOlxParser","numericInputWithFeedbackAndHintsOLX","dropdownOlxParser","dropdownOLXWithFeedbackAndHintsOLX","multipleChoiceOlxParser","multipleChoiceWithFeedbackAndHintsOLX","multipleChoiceWithoutAnswersOlxParser","multipleChoiceWithoutAnswers","textInputOlxParser","textInputWithFeedbackAndHintsOLX","textInputMultipleAnswersOlxParser","textInputWithFeedbackAndHintsOLXWithMultipleAnswers","advancedOlxParser","advancedProblemOlX","multipleTextInputOlxParser","multipleTextInputProblemOlX","multipleNumericOlxParser","multipleNumericProblemOlX","numericAndTextInputOlxParser","NumericAndTextInputProblemOlX","labelDescriptionQuestionOlxParser","labelDescriptionQuestionOLX","shuffleOlxParser","shuffleProblemOLX","describe","it","getParsedOLXData","e","expect","toBeInstanceOf","Error","message","toBe","olxparser","scriptProblemOlX","parseQuestions","toThrow","problemType","getProblemType","toEqual","ProblemTypeKeys","MULTISELECT","NUMERIC","DROPDOWN","SINGLESELECT","TEXTINPUT","ADVANCED","hints","getHints","answers","parseMultipleChoiceAnswers","data","toHaveLength","numberParseTestOLX","parseStringResponse","parseNumericResponse","blankQuestionOLX","question","htmlEntityTestOLX","styledQuestionOLX","test","getCheckboxesOLXWithFeedbackAndHintsOLX","explanation","getSolutionExplanation","expected","solutionExplanation","replace"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.test.js"],"sourcesContent":["import { OLXParser } from './OLXParser';\nimport {\n  checkboxesOLXWithFeedbackAndHintsOLX,\n  getCheckboxesOLXWithFeedbackAndHintsOLX,\n  dropdownOLXWithFeedbackAndHintsOLX,\n  numericInputWithFeedbackAndHintsOLX,\n  textInputWithFeedbackAndHintsOLX,\n  multipleChoiceWithoutAnswers,\n  multipleChoiceWithFeedbackAndHintsOLX,\n  textInputWithFeedbackAndHintsOLXWithMultipleAnswers,\n  advancedProblemOlX,\n  multipleTextInputProblemOlX,\n  multipleNumericProblemOlX,\n  NumericAndTextInputProblemOlX,\n  blankProblemOLX,\n  blankQuestionOLX,\n  styledQuestionOLX,\n  shuffleProblemOLX,\n  scriptProblemOlX,\n  labelDescriptionQuestionOLX,\n  htmlEntityTestOLX,\n  numberParseTestOLX,\n} from './mockData/olxTestData';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\n\nconst blankOlxParser = new OLXParser(blankProblemOLX.rawOLX);\nconst checkboxOlxParser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\nconst numericOlxParser = new OLXParser(numericInputWithFeedbackAndHintsOLX.rawOLX);\nconst dropdownOlxParser = new OLXParser(dropdownOLXWithFeedbackAndHintsOLX.rawOLX);\nconst multipleChoiceOlxParser = new OLXParser(multipleChoiceWithFeedbackAndHintsOLX.rawOLX);\nconst multipleChoiceWithoutAnswersOlxParser = new OLXParser(multipleChoiceWithoutAnswers.rawOLX);\nconst textInputOlxParser = new OLXParser(textInputWithFeedbackAndHintsOLX.rawOLX);\nconst textInputMultipleAnswersOlxParser = new OLXParser(textInputWithFeedbackAndHintsOLXWithMultipleAnswers.rawOLX);\nconst advancedOlxParser = new OLXParser(advancedProblemOlX.rawOLX);\nconst multipleTextInputOlxParser = new OLXParser(multipleTextInputProblemOlX.rawOLX);\nconst multipleNumericOlxParser = new OLXParser(multipleNumericProblemOlX.rawOLX);\nconst numericAndTextInputOlxParser = new OLXParser(NumericAndTextInputProblemOlX.rawOLX);\nconst labelDescriptionQuestionOlxParser = new OLXParser(labelDescriptionQuestionOLX.rawOLX);\nconst shuffleOlxParser = new OLXParser(shuffleProblemOLX.rawOLX);\n\ndescribe('OLXParser', () => {\n  describe('throws error and redirects to advanced editor', () => {\n    describe('when settings attributes are on problem tags', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          labelDescriptionQuestionOlxParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Misc Attributes asscoiated with problem, opening in advanced editor');\n        }\n      });\n    });\n    describe('when settings attributes are on problem tags', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          shuffleOlxParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Misc Tags, reverting to Advanced Editor');\n        }\n      });\n    });\n    describe('when question parser finds script tags', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        const olxparser = new OLXParser(scriptProblemOlX.rawOLX);\n        expect(() => olxparser.parseQuestions('numericalresponse')).toThrow(new Error('Script Tag, reverting to Advanced Editor'));\n      });\n    });\n  });\n  describe('getProblemType()', () => {\n    describe('given a blank problem', () => {\n      const problemType = blankOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.MULTISELECT', () => {\n        expect(problemType).toEqual(null);\n      });\n    });\n    describe('given checkbox olx with feedback and hints', () => {\n      const problemType = checkboxOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.MULTISELECT', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.MULTISELECT);\n      });\n    });\n    describe('given numeric olx with feedback and hints', () => {\n      const problemType = numericOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.NUMERIC', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.NUMERIC);\n      });\n    });\n    describe('given dropdown olx with feedback and hints', () => {\n      const problemType = dropdownOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.DROPDOWN', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.DROPDOWN);\n      });\n    });\n    describe('given multiple choice olx with feedback and hints', () => {\n      const problemType = multipleChoiceOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.SINGLESELECT', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.SINGLESELECT);\n      });\n    });\n    describe('given text input olx with feedback and hints', () => {\n      const problemType = textInputOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.TEXTINPUT', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.TEXTINPUT);\n      });\n    });\n    describe('given an advanced problem', () => {\n      const problemType = advancedOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n    describe('given a problem with multiple text inputs', () => {\n      const problemType = multipleTextInputOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n    describe('given a problem with multiple numeric inputs', () => {\n      const problemType = multipleNumericOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n    describe('given a problem with both a text and numeric input', () => {\n      const problemType = numericAndTextInputOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n  });\n  describe('getHints()', () => {\n    describe('given a problem with no hints', () => {\n      const hints = labelDescriptionQuestionOlxParser.getHints();\n      it('should return an empty array', () => {\n        expect(hints).toEqual([]);\n      });\n    });\n    describe('given checkbox olx with feedback and hints', () => {\n      const hints = checkboxOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given numeric olx with feedback and hints', () => {\n      const hints = numericOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(numericInputWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given dropdown olx with feedback and hints', () => {\n      const hints = dropdownOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(dropdownOLXWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given multiple choice olx with feedback and hints', () => {\n      const hints = multipleChoiceOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(multipleChoiceWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given text input olx with feedback and hints', () => {\n      const hints = textInputOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(textInputWithFeedbackAndHintsOLX.hints);\n      });\n    });\n  });\n  describe('parseMultipleChoiceAnswers()', () => {\n    describe('given a problem with no answers', () => {\n      const { answers } = multipleChoiceWithoutAnswersOlxParser.parseMultipleChoiceAnswers(\n        'multiplechoiceresponse',\n        'choicegroup',\n        'choice',\n      );\n      it('should return a default answer', () => {\n        expect(answers).toEqual(multipleChoiceWithoutAnswers.data.answers);\n        expect(answers).toHaveLength(1);\n      });\n    });\n    describe('given multiple choice olx with hex numbers and leading zeros', () => {\n      const olxparser = new OLXParser(numberParseTestOLX.rawOLX);\n      const { answers } = olxparser.parseMultipleChoiceAnswers('multiplechoiceresponse', 'choicegroup', 'choice');\n      it('should not parse hex numbers and leading zeros', () => {\n        expect(answers).toEqual(numberParseTestOLX.data.answers);\n      });\n      it('should equal an array of objects with length four', () => {\n        expect(answers).toHaveLength(4);\n      });\n    });\n    describe('given checkbox olx with feedback and hints', () => {\n      const { answers } = checkboxOlxParser.parseMultipleChoiceAnswers('choiceresponse', 'checkboxgroup', 'choice');\n      it('should equal an array of objects with length four', () => {\n        expect(answers).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(4);\n      });\n    });\n    describe('given dropdown olx with feedback and hints', () => {\n      const { answers } = dropdownOlxParser.parseMultipleChoiceAnswers('optionresponse', 'optioninput', 'option');\n      it('should equal an array of objects with length three', () => {\n        expect(answers).toEqual(dropdownOLXWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(3);\n      });\n    });\n    describe('given multiple choice olx with feedback and hints', () => {\n      const { answers } = multipleChoiceOlxParser.parseMultipleChoiceAnswers('multiplechoiceresponse', 'choicegroup', 'choice');\n      it('should equal an array of objects with length three', () => {\n        expect(answers).toEqual(multipleChoiceWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(3);\n      });\n    });\n  });\n  describe('parseStringResponse()', () => {\n    // describe('given a problem with no answers', () => {\n    //   // TODO\n    // });\n    describe('given text input olx with feedback and hints', () => {\n      const { answers } = textInputOlxParser.parseStringResponse();\n      it('should equal an array of objects with length three', () => {\n        expect(answers).toEqual(textInputWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(3);\n      });\n    });\n    describe('given text input olx with feedback and hints with multiple answers', () => {\n      const { answers } = textInputMultipleAnswersOlxParser.parseStringResponse();\n      it('should equal an array of objects with length four', () => {\n        expect(answers).toEqual(textInputWithFeedbackAndHintsOLXWithMultipleAnswers.data.answers);\n        expect(answers).toHaveLength(4);\n      });\n    });\n  });\n  describe('parseNumericResponse()', () => {\n    // describe('given a problem with no answers', () => {\n    //   // TODDO\n    // });\n    describe('given numeric olx with feedback and hints', () => {\n      const { answers } = numericOlxParser.parseNumericResponse();\n      it('should equal an array of objects with length two', () => {\n        expect(answers).toEqual(numericInputWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(2);\n      });\n    });\n  });\n  describe('parseQuestions()', () => {\n    describe('given olx with no question content', () => {\n      const olxparser = new OLXParser(blankQuestionOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should return an empty string for question', () => {\n        expect(question).toBe(blankQuestionOLX.question);\n      });\n    });\n    describe('given a simple problem olx', () => {\n      const question = textInputOlxParser.parseQuestions('stringresponse');\n      it('should return a string of HTML', () => {\n        expect(question).toEqual(textInputWithFeedbackAndHintsOLX.question);\n      });\n    });\n    describe('given olx with html entities', () => {\n      const olxparser = new OLXParser(htmlEntityTestOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should not encode html entities', () => {\n        expect(question).toEqual(htmlEntityTestOLX.question);\n      });\n    });\n    describe('given olx with styled content', () => {\n      const olxparser = new OLXParser(styledQuestionOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should pase/build correct styling', () => {\n        expect(question).toBe(styledQuestionOLX.question);\n      });\n    });\n    describe('given olx with label and description tags inside response tag', () => {\n      const olxparser = new OLXParser(labelDescriptionQuestionOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should append the label/description to the question', () => {\n        expect(question).toBe(labelDescriptionQuestionOLX.question);\n      });\n    });\n  });\n  describe('getSolutionExplanation()', () => {\n    describe('for checkbox questions', () => {\n      test('should parse text in p tags', () => {\n        const { rawOLX } = getCheckboxesOLXWithFeedbackAndHintsOLX();\n        const olxparser = new OLXParser(rawOLX);\n        const problemType = olxparser.getProblemType();\n        const explanation = olxparser.getSolutionExplanation(problemType);\n        const expected = getCheckboxesOLXWithFeedbackAndHintsOLX().solutionExplanation;\n        expect(explanation.replace(/\\s/g, '')).toBe(expected.replace(/\\s/g, ''));\n      });\n    });\n  });\n});\n"],"mappings":"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"}