{"version":3,"file":"index.js","names":["_react","_interopRequireDefault","require","_reactRedux","_propTypes","_i18n","_paragon","_icons","_redux","_messages","_requests","_video","_ErrorAlert","_CollapsibleFormWidget","_ImportTranscriptCard","_Transcript","_hooks","_module","_interopRequireWildcard","_jsxRuntime","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","hooks","exports","updateErrors","_ref","isUploadError","isDeleteError","error","setError","React","useContext","ErrorContext","transcripts","uploadError","messages","uploadTranscriptError","defaultMessage","deleteError","deleteTranscriptError","transcriptLanguages","intl","languages","fullTextTranslatedStrings","in8lTranscriptLanguages","transcript","join","hasTranscripts","onAddNewTranscript","_ref2","updateField","newTranscripts","TranscriptWidget","_ref3","selectedVideoTranscriptUrls","allowTranscriptDownloads","showTranscriptByDefault","allowTranscriptImport","showImportCard","setShowImportCard","useState","fullTextLanguages","module","jsxs","fontSize","isError","subtitle","title","formatMessage","children","jsx","hideHeading","FormattedMessage","Stack","gap","Form","Group","className","map","language","index","transcriptUrl","ActionRow","Checkbox","checked","onChange","e","allowDownloadCheckboxLabel","OverlayTrigger","placement","overlay","Tooltip","id","tooltipMessage","Icon","src","InfoOutline","style","height","width","Spacer","showByDefaultCheckboxLabel","Fragment","addFirstTranscript","setOpen","Button","size","iconBefore","Add","variant","onClick","uploadButtonLabel","defaultProps","propTypes","PropTypes","arrayOf","string","isRequired","shape","bool","func","intlShape","mapStateToProps","state","selectors","video","requests","isFailed","requestKey","RequestKeys","uploadTranscript","deleteTranscript","mapDispatchToProps","dispatch","stateUpdate","actions","_default","injectIntl","connect"],"sources":["../../../../../../../../src/editors/containers/VideoEditor/components/VideoSettingsModal/components/TranscriptWidget/index.jsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  FormattedMessage,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport {\n  Form,\n  Button,\n  Stack,\n  Icon,\n  OverlayTrigger,\n  Tooltip,\n  ActionRow,\n} from '@edx/paragon';\nimport { Add, InfoOutline } from '@edx/paragon/icons';\n\nimport { actions, selectors } from '../../../../../../data/redux';\nimport messages from './messages';\n\nimport { RequestKeys } from '../../../../../../data/constants/requests';\nimport { in8lTranscriptLanguages } from '../../../../../../data/constants/video';\n\nimport ErrorAlert from '../../../../../../sharedComponents/ErrorAlerts/ErrorAlert';\nimport CollapsibleFormWidget from '../CollapsibleFormWidget';\n\nimport ImportTranscriptCard from './ImportTranscriptCard';\nimport Transcript from './Transcript';\nimport { ErrorContext } from '../../../../hooks';\nimport * as module from './index';\n\nexport const hooks = {\n  updateErrors: ({ isUploadError, isDeleteError }) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [error, setError] = React.useContext(ErrorContext).transcripts;\n    if (isUploadError) {\n      setError({ ...error, uploadError: messages.uploadTranscriptError.defaultMessage });\n    }\n    if (isDeleteError) {\n      setError({ ...error, deleteError: messages.deleteTranscriptError.defaultMessage });\n    }\n  },\n  transcriptLanguages: (transcripts, intl) => {\n    const languages = [];\n    if (transcripts && transcripts.length > 0) {\n      const fullTextTranslatedStrings = in8lTranscriptLanguages(intl);\n      transcripts.forEach(transcript => {\n        if (!(transcript === '')) {\n          languages.push(fullTextTranslatedStrings[transcript]);\n        }\n      });\n\n      return languages.join(', ');\n    }\n    return 'None';\n  },\n  hasTranscripts: (transcripts) => {\n    if (transcripts && transcripts.length > 0) {\n      return true;\n    }\n    return false;\n  },\n  onAddNewTranscript: ({ transcripts, updateField }) => {\n    // keep blank lang code for now, will be updated once lang is selected.\n    if (!transcripts) {\n      updateField({ transcripts: [''] });\n      return;\n    }\n    const newTranscripts = [...transcripts, ''];\n    updateField({ transcripts: newTranscripts });\n  },\n};\n\n/**\n * Collapsible Form widget controlling video transcripts\n */\nexport const TranscriptWidget = ({\n  // redux\n  transcripts,\n  selectedVideoTranscriptUrls,\n  allowTranscriptDownloads,\n  showTranscriptByDefault,\n  allowTranscriptImport,\n  updateField,\n  isUploadError,\n  isDeleteError,\n  // injected\n  intl,\n}) => {\n  const [error] = React.useContext(ErrorContext).transcripts;\n  const [showImportCard, setShowImportCard] = React.useState(true);\n  const fullTextLanguages = module.hooks.transcriptLanguages(transcripts, intl);\n  const hasTranscripts = module.hooks.hasTranscripts(transcripts);\n\n  return (\n    <CollapsibleFormWidget\n      fontSize=\"x-small\"\n      isError={Object.keys(error).length !== 0}\n      subtitle={fullTextLanguages}\n      title={intl.formatMessage(messages.title)}\n    >\n      <ErrorAlert\n        hideHeading\n        isError={isUploadError}\n      >\n        <FormattedMessage {...messages.uploadTranscriptError} />\n      </ErrorAlert>\n      <ErrorAlert\n        hideHeading\n        isError={isDeleteError}\n      >\n        <FormattedMessage {...messages.deleteTranscriptError} />\n      </ErrorAlert>\n      <Stack gap={3}>\n        {hasTranscripts ? (\n          <Form.Group className=\"border-primary-100 border-bottom\">\n            {transcripts.map((language, index) => (\n              <Transcript\n                language={language}\n                transcriptUrl={selectedVideoTranscriptUrls[language]}\n                index={index}\n              />\n            ))}\n            <ActionRow className=\"mt-3.5\">\n              <Form.Checkbox\n                checked={allowTranscriptDownloads}\n                className=\"decorative-control-label\"\n                onChange={(e) => updateField({ allowTranscriptDownloads: e.target.checked })}\n              >\n                <div className=\"small text-gray-700\">\n                  <FormattedMessage {...messages.allowDownloadCheckboxLabel} />\n                </div>\n              </Form.Checkbox>\n              <OverlayTrigger\n                key=\"top\"\n                placement=\"top\"\n                overlay={(\n                  <Tooltip id=\"tooltip-top\">\n                    <FormattedMessage {...messages.tooltipMessage} />\n                  </Tooltip>\n                )}\n              >\n                <Icon src={InfoOutline} style={{ height: '16px', width: '16px' }} />\n              </OverlayTrigger>\n              <ActionRow.Spacer />\n            </ActionRow>\n            <Form.Checkbox\n              checked={showTranscriptByDefault}\n              className=\"mt-3 decorative-control-label\"\n              onChange={(e) => updateField({ showTranscriptByDefault: e.target.checked })}\n            >\n              <div className=\"small text-gray-700\">\n                <FormattedMessage {...messages.showByDefaultCheckboxLabel} />\n              </div>\n            </Form.Checkbox>\n          </Form.Group>\n        ) : (\n          <>\n            <FormattedMessage {...messages.addFirstTranscript} />\n            {showImportCard && allowTranscriptImport\n              ? <ImportTranscriptCard setOpen={setShowImportCard} />\n              : null}\n          </>\n        )}\n        <div className=\"mt-2\">\n          <Button\n            className=\"text-primary-500 font-weight-bold justify-content-start pl-0\"\n            size=\"sm\"\n            iconBefore={Add}\n            variant=\"link\"\n            onClick={() => module.hooks.onAddNewTranscript({ transcripts, updateField })}\n          >\n            <FormattedMessage {...messages.uploadButtonLabel} />\n          </Button>\n        </div>\n      </Stack>\n    </CollapsibleFormWidget>\n  );\n};\n\nTranscriptWidget.defaultProps = {\n  selectedVideoTranscriptUrls: {},\n};\nTranscriptWidget.propTypes = {\n  // redux\n  transcripts: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedVideoTranscriptUrls: PropTypes.shape(),\n  allowTranscriptDownloads: PropTypes.bool.isRequired,\n  showTranscriptByDefault: PropTypes.bool.isRequired,\n  allowTranscriptImport: PropTypes.bool.isRequired,\n  updateField: PropTypes.func.isRequired,\n  isUploadError: PropTypes.bool.isRequired,\n  isDeleteError: PropTypes.bool.isRequired,\n  intl: PropTypes.shape(intlShape).isRequired,\n};\nexport const mapStateToProps = (state) => ({\n  transcripts: selectors.video.transcripts(state),\n  selectedVideoTranscriptUrls: selectors.video.selectedVideoTranscriptUrls(state),\n  allowTranscriptDownloads: selectors.video.allowTranscriptDownloads(state),\n  showTranscriptByDefault: selectors.video.showTranscriptByDefault(state),\n  allowTranscriptImport: selectors.video.allowTranscriptImport(state),\n  isUploadError: selectors.requests.isFailed(state, { requestKey: RequestKeys.uploadTranscript }),\n  isDeleteError: selectors.requests.isFailed(state, { requestKey: RequestKeys.deleteTranscript }),\n});\n\nexport const mapDispatchToProps = (dispatch) => ({\n  updateField: (stateUpdate) => dispatch(actions.video.updateField(stateUpdate)),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(TranscriptWidget));\n"],"mappings":"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"}