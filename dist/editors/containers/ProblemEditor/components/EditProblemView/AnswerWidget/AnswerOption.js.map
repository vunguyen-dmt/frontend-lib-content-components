{"version":3,"file":"AnswerOption.js","names":["_react","_interopRequireWildcard","require","_reactRedux","_propTypes","_interopRequireDefault","_paragon","_icons","_i18n","_messages","_redux","_types","_Checker","_Feedback","hooks","_problem","_ExpandableTextArea","_jsxRuntime","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ownKeys","keys","getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","key","value","_toPropertyKey","configurable","writable","_toPrimitive","String","Symbol","toPrimitive","TypeError","Number","AnswerOption","_ref","answer","hasSingleAnswer","intl","problemType","dispatch","useDispatch","removeAnswer","setAnswer","setAnswerTitle","setSelectedFeedback","setUnselectedFeedback","isFeedbackVisible","toggleFeedback","useFeedback","getInputArea","ProblemTypeKeys","SINGLESELECT","MULTISELECT","includes","jsx","title","setContent","placeholder","formatMessage","messages","answerTextboxPlaceholder","id","NUMERIC","isAnswerRange","Form","Control","as","className","autoResize","rows","onChange","jsxs","children","answerRangeTextboxPlaceholder","FormattedMessage","answerRangeHelperText","Collapsible","Advanced","open","onToggle","disabled","Body","FeedbackBox","Trigger","Icon","src","FeedbackOutline","alt","feedbackToggleIconAltText","IconButton","DeleteOutline","iconAs","answerDeleteIconAltText","onClick","variant","exports","propTypes","answerOptionProps","isRequired","PropTypes","bool","intlShape","string","mapStateToProps","state","selectors","problem","mapDispatchToProps","_default","injectIntl","connect","memo"],"sources":["../../../../../../../src/editors/containers/ProblemEditor/components/EditProblemView/AnswerWidget/AnswerOption.jsx"],"sourcesContent":["import React, { memo } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Collapsible,\n  Icon,\n  IconButton,\n  Form,\n} from '@openedx/paragon';\nimport { FeedbackOutline, DeleteOutline } from '@openedx/paragon/icons';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport messages from './messages';\nimport { selectors } from '../../../../../data/redux';\nimport { answerOptionProps } from '../../../../../data/services/cms/types';\nimport Checker from './components/Checker';\nimport { FeedbackBox } from './components/Feedback';\nimport * as hooks from './hooks';\nimport { ProblemTypeKeys } from '../../../../../data/constants/problem';\nimport ExpandableTextArea from '../../../../../sharedComponents/ExpandableTextArea';\n\nexport const AnswerOption = ({\n  answer,\n  hasSingleAnswer,\n  // injected\n  intl,\n  // redux\n  problemType,\n}) => {\n  const dispatch = useDispatch();\n  const removeAnswer = hooks.removeAnswer({ answer, dispatch });\n  const setAnswer = hooks.setAnswer({ answer, hasSingleAnswer, dispatch });\n  const setAnswerTitle = hooks.setAnswerTitle({\n    answer,\n    hasSingleAnswer,\n    dispatch,\n    problemType,\n  });\n  const setSelectedFeedback = hooks.setSelectedFeedback({ answer, hasSingleAnswer, dispatch });\n  const setUnselectedFeedback = hooks.setUnselectedFeedback({ answer, hasSingleAnswer, dispatch });\n  const { isFeedbackVisible, toggleFeedback } = hooks.useFeedback(answer);\n\n  const getInputArea = () => {\n    if ([ProblemTypeKeys.SINGLESELECT, ProblemTypeKeys.MULTISELECT].includes(problemType)) {\n      return (\n        <ExpandableTextArea\n          value={answer.title}\n          setContent={setAnswerTitle}\n          placeholder={intl.formatMessage(messages.answerTextboxPlaceholder)}\n          id={`answer-${answer.id}`}\n        />\n      );\n    }\n    if (problemType !== ProblemTypeKeys.NUMERIC || !answer.isAnswerRange) {\n      return (\n        <Form.Control\n          as=\"textarea\"\n          className=\"answer-option-textarea text-gray-500 small\"\n          autoResize\n          rows={1}\n          value={answer.title}\n          onChange={setAnswerTitle}\n          placeholder={intl.formatMessage(messages.answerTextboxPlaceholder)}\n        />\n      );\n    }\n    // Return Answer Range View\n    return (\n      <div>\n        <Form.Control\n          as=\"textarea\"\n          className=\"answer-option-textarea text-gray-500 small\"\n          autoResize\n          rows={1}\n          value={answer.title}\n          onChange={setAnswerTitle}\n          placeholder={intl.formatMessage(messages.answerRangeTextboxPlaceholder)}\n        />\n        <div className=\"pgn__form-switch-helper-text\">\n          <FormattedMessage {...messages.answerRangeHelperText} />\n        </div>\n      </div>\n\n    );\n  };\n\n  return (\n    <Collapsible.Advanced\n      open={isFeedbackVisible}\n      onToggle={toggleFeedback}\n      className=\"answer-option d-flex flex-row justify-content-between flex-nowrap pb-2 pt-2\"\n    >\n      <div className=\"mr-1 d-flex\">\n        <Checker\n          hasSingleAnswer={hasSingleAnswer}\n          answer={answer}\n          setAnswer={setAnswer}\n          disabled={problemType === ProblemTypeKeys.NUMERIC}\n        />\n      </div>\n      <div className=\"ml-1 flex-grow-1\">\n        {getInputArea()}\n        <Collapsible.Body>\n          <FeedbackBox\n            problemType={problemType}\n            answer={answer}\n            setSelectedFeedback={setSelectedFeedback}\n            setUnselectedFeedback={setUnselectedFeedback}\n            intl={intl}\n          />\n        </Collapsible.Body>\n      </div>\n      <div className=\"d-flex flex-row flex-nowrap\">\n        <Collapsible.Trigger aria-label=\"Toggle feedback\" className=\"btn-icon btn-icon-primary btn-icon-md align-items-center\">\n          <Icon\n            src={FeedbackOutline}\n            alt={intl.formatMessage(messages.feedbackToggleIconAltText)}\n          />\n        </Collapsible.Trigger>\n        <IconButton\n          src={DeleteOutline}\n          iconAs={Icon}\n          alt={intl.formatMessage(messages.answerDeleteIconAltText)}\n          onClick={removeAnswer}\n          variant=\"primary\"\n        />\n      </div>\n    </Collapsible.Advanced>\n  );\n};\n\nAnswerOption.propTypes = {\n  answer: answerOptionProps.isRequired,\n  hasSingleAnswer: PropTypes.bool.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n  // redux\n  problemType: PropTypes.string.isRequired,\n};\n\nexport const mapStateToProps = (state) => ({\n  problemType: selectors.problem.problemType(state),\n});\n\nexport const mapDispatchToProps = {};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(memo(AnswerOption)));\n"],"mappings":"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"}