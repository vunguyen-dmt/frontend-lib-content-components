{"version":3,"file":"handlers.js","names":["handleIndexEvent","_ref","handler","transform","index","val","exports","handleIndexTransformEvent","_ref2","local","setter","onValue","e","target","value","onChecked","checked","onEvent"],"sources":["../../../../../../../src/editors/containers/VideoEditor/components/VideoSettingsModal/components/handlers.js"],"sourcesContent":["/**\n * handleIndexEvent({ handler, transform })\n * return a method that takes an index and returns an event handler of the given type\n * that calls a transform with the given index and the incoming value.\n * @param {func} handler - event handler (onValue, onChecked, etc)\n * @param {func} transform - transform method taking an index and a new value\n * @return {func} - event handler creator for index-tied values\n */\nexport const handleIndexEvent = ({ handler, transform }) => (index) => (\n  handler(val => transform(index, val))\n);\n\n/**\n * handleIndexTransformEvent({ handler, setter, local, transform })\n * return a method that takes an index and returns an event handler of the given type\n * that calls a transform with the given index and the incoming value.\n * @param {func} handler - event handler (onValue, onChecked, etc)\n * @param {string|number|object} local - local hook values\n * @param {func} setter - method that updates models based on event\n * @param {func} transform - transform method taking an index and a new value\n * @return {func} - event handler creator for index-tied values with separate setter and transforms\n */\nexport const handleIndexTransformEvent = ({\n  handler,\n  local,\n  setter,\n  transform,\n}) => (index) => (\n  handler(val => setter(transform(local, index, val)))\n);\n\n/**\n * onValue(handler)\n * returns an event handler that calls the given method with the event target value\n * Intended for most basic input types.\n * @param {func} handler - callback to receive the event value\n * @return - event handler that calls passed handler with event.target.value\n */\nexport const onValue = (handler) => (e) => handler(e.target.value);\n\n/**\n * onValue(handler)\n * returns an event handler that calls the given method with the event target value\n * Intended for checkbox input types.\n * @param {func} handler - callback to receive the event value\n * @return - event handler that calls passed handler with event.target.checked\n */\nexport const onChecked = (handler) => (e) => handler(e.target.checked);\n\n/**\n * onEvent(handler)\n * returns an event handler that calls the given method with the event\n * Intended for most basic input types.\n * @param {func} handler - callback to receive the event value\n * @return - event handler that calls passed handler with event\n */\nexport const onEvent = (handler) => (e) => handler(e);\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,gBAAgB,GAAGC,IAAA;EAAA,IAAC;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAAF,IAAA;EAAA,OAAMG,KAAK,IAChEF,OAAO,CAACG,GAAG,IAAIF,SAAS,CAACC,KAAK,EAAEC,GAAG,CAAC,CACrC;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATAC,OAAA,CAAAN,gBAAA,GAAAA,gBAAA;AAUO,MAAMO,yBAAyB,GAAGC,KAAA;EAAA,IAAC;IACxCN,OAAO;IACPO,KAAK;IACLC,MAAM;IACNP;EACF,CAAC,GAAAK,KAAA;EAAA,OAAMJ,KAAK,IACVF,OAAO,CAACG,GAAG,IAAIK,MAAM,CAACP,SAAS,CAACM,KAAK,EAAEL,KAAK,EAAEC,GAAG,CAAC,CAAC,CACpD;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AANAC,OAAA,CAAAC,yBAAA,GAAAA,yBAAA;AAOO,MAAMI,OAAO,GAAIT,OAAO,IAAMU,CAAC,IAAKV,OAAO,CAACU,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AANAR,OAAA,CAAAK,OAAA,GAAAA,OAAA;AAOO,MAAMI,SAAS,GAAIb,OAAO,IAAMU,CAAC,IAAKV,OAAO,CAACU,CAAC,CAACC,MAAM,CAACG,OAAO,CAAC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AANAV,OAAA,CAAAS,SAAA,GAAAA,SAAA;AAOO,MAAME,OAAO,GAAIf,OAAO,IAAMU,CAAC,IAAKV,OAAO,CAACU,CAAC,CAAC;AAACN,OAAA,CAAAW,OAAA,GAAAA,OAAA"}