{"version":3,"file":"ReactStateOLXParser.js","names":["_lodashEs","_interopRequireDefault","require","_fastXmlParser","_problem","_constants","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","ReactStateOLXParser","constructor","problemState","parserOptions","ignoreAttributes","alwaysCreateTextNode","numberParseOptions","leadingZeros","hex","questionParserOptions","preserveOrder","questionBuilderOptions","attributeNamePrefix","suppressBooleanAttributes","format","builderOptions","questionParser","XMLParser","parser","builder","XMLBuilder","questionBuilder","editorObject","problem","addHints","hintsArray","hints","parsedHint","parse","demandhint","addSolution","solution","solutionTitle","parsedSolution","paragraphs","p","withWrapper","_","isArray","solutionObject","div","addMultiSelectAnswers","option","choice","compoundhint","widget","answers","problemType","answerTitles","selectedFeedback","unselectedFeedback","answer","feedback","singleAnswer","title","id","currentSelectedFeedback","currentUnselectedFeedback","isEmpty","ProblemTypeKeys","MULTISELECT","parsedSelectedFeedback","parsedUnselectedFeedback","correct","has","addGroupFeedbackList","groupFeedbackList","element","join","addQuestion","question","questionObject","tag","ind","tagName","label","subTag","subTagName","buildMultiSelectProblem","widgetObject","problemObject","build","questionString","problemTypeTag","match","DROPDOWN","SINGLESELECT","updatedString","problemString","replace","buildTextInput","answerObject","buildTextInputAnswersFeedback","TEXTINPUT","additionAnswers","wrongAnswers","firstCorrectAnswerParsed","correcthint","getAnswerHints","hasAttributeWithValue","wronghint","additional_answer","stringequalhint","get","textline","buildNumericInput","buildNumericalResponse","NUMERIC","tolerance","settings","additionalAnswers","startsWith","parsedRange","split","rawLowerBound","rawUpperBound","lowerBoundInt","lowerBoundFraction","upperBoundInt","upperBoundFraction","includes","numerator","denominator","lowerBoundFloat","upperBoundFloat","lowerBoundChar","upperBoundChar","responseParam","responseparam","type","ToleranceTypes","number","formulaequationinput","parsedFeedback","attr","toString","trim","buildOLX","_default","exports"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/ReactStateOLXParser.js"],"sourcesContent":["import _ from 'lodash-es';\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\nimport { ToleranceTypes } from '../components/EditProblemView/SettingsWidget/settingsComponents/Tolerance/constants';\n\nclass ReactStateOLXParser {\n  constructor(problemState) {\n    const parserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n    };\n    const questionParserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n    };\n    const questionBuilderOptions = {\n      ignoreAttributes: false,\n      attributeNamePrefix: '@_',\n      suppressBooleanAttributes: false,\n      format: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n    };\n    const builderOptions = {\n      ignoreAttributes: false,\n      attributeNamePrefix: '@_',\n      suppressBooleanAttributes: false,\n      format: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n    };\n    this.questionParser = new XMLParser(questionParserOptions);\n    this.parser = new XMLParser(parserOptions);\n    this.builder = new XMLBuilder(builderOptions);\n    this.questionBuilder = new XMLBuilder(questionBuilderOptions);\n    this.editorObject = problemState.editorObject;\n    this.problemState = problemState.problem;\n  }\n\n  /** addHints()\n   * The editorObject saved to the class constuctor is parsed for the attribute hints. No hints returns an empty object.\n   * The hints are parsed and appended to the hintsArray as object representations of the hint. The hints array is saved\n   * to the hint key in the demandHint object and returned.\n   * @return {object} demandhint object with atrribut hint with array of objects\n   */\n  addHints() {\n    const hintsArray = [];\n    const { hints } = this.editorObject;\n    if (hints.length < 1) {\n      return {};\n    }\n    hints.forEach(hint => {\n      if (hint.length > 0) {\n        const parsedHint = this.parser.parse(hint);\n        hintsArray.push({\n          ...parsedHint,\n        });\n      }\n    });\n    const demandhint = {\n      demandhint: {\n        hint: hintsArray,\n      },\n    };\n    return demandhint;\n  }\n\n  /** addSolution()\n   * The editorObject saved to the class constuctor is parsed for the attribute solution. If the soltuion is empty, it\n   * returns an empty object. The solution is parsed and checked if paragraph key's value is a string or array. Studio\n   * requires a div wrapper with a heading (Explanation). The heading is prepended to the parsed solution object. The\n   * solution object is returned with the updated div wrapper.\n   * @return {object} object representation of solution\n   */\n  addSolution() {\n    const { solution } = this.editorObject;\n    if (!solution || solution.length <= 0) { return {}; }\n    const solutionTitle = { '#text': 'Explanation' };\n    const parsedSolution = this.parser.parse(solution);\n    const paragraphs = parsedSolution.p;\n    const withWrapper = _.isArray(paragraphs) ? [solutionTitle, ...paragraphs] : [solutionTitle, paragraphs];\n    const solutionObject = {\n      solution: {\n        div: {\n          '@_class': 'detailed-solution',\n          p: withWrapper,\n        },\n      },\n    };\n    return solutionObject;\n  }\n\n  /** addMultiSelectAnswers(option)\n   * addMultiSelectAnswers takes option. Option is used to assign an answers to the\n   * correct OLX tag. This function is used for multiple choice, checkbox, and\n   * dropdown problems. The editorObject saved to the class constuctor is parsed for\n   * answers (titles only), selectFeedback, and unselectedFeedback. The problemState\n   * saved to the class constructor is parsed for the problemType and answers (full\n   * object). The answers are looped through to  pair feedback with its respective\n   * OLX tags. While matching feedback tags, answers are also mapped to their\n   * respective OLX tags. he object representation of the answers is returned with\n   * the correct wrapping tags. For checkbox problems, compound hints are also returned.\n   * @param {string} option - string of answer tag name\n   * @return {object} object representation of answers\n   */\n  addMultiSelectAnswers(option) {\n    const choice = [];\n    let compoundhint = [];\n    let widget = {};\n    // eslint-disable-next-line prefer-const\n    let { answers, problemType } = this.problemState;\n    const answerTitles = this.editorObject?.answers;\n    const { selectedFeedback, unselectedFeedback } = this.editorObject;\n    /* todo */\n    /*\n      * the logic for general  feedback is ot current being used.\n      * when component is updated will need to return to this code.\n      * general feedback replaces selected feedback if all incorrect selected feedback is the same.\n      * ******************************************\n    if (generalFeedback !== ''\n    && answers.every(\n      answer => (\n        answer.correct\n          ? true\n          : answer?.selectedFeedback === answers.find(a => a.correct === false).selectedFeedback\n      ),\n    )) {\n      answers = answers.map(answer => (!answer?.correct\n        ? { ...answer, selectedFeedback: generalFeedback }\n        : answer));\n    }\n    */\n    answers.forEach((answer) => {\n      const feedback = [];\n      let singleAnswer = {};\n      const title = answerTitles ? this.parser.parse(answerTitles[answer.id]) : { '#text': answer.title };\n      const currentSelectedFeedback = selectedFeedback?.[answer.id] || null;\n      const currentUnselectedFeedback = unselectedFeedback?.[answer.id] || null;\n      let isEmpty;\n      if (answerTitles) {\n        isEmpty = Object.keys(title)?.length <= 0;\n      } else {\n        isEmpty = title['#text']?.length <= 0;\n      }\n      if (title && !isEmpty) {\n        if (currentSelectedFeedback && problemType === ProblemTypeKeys.MULTISELECT) {\n          const parsedSelectedFeedback = this.parser.parse(currentSelectedFeedback);\n          feedback.push({\n            ...parsedSelectedFeedback,\n            '@_selected': true,\n          });\n        }\n        if (currentSelectedFeedback && problemType !== ProblemTypeKeys.MULTISELECT) {\n          const parsedSelectedFeedback = this.parser.parse(currentSelectedFeedback);\n          feedback.push({\n            ...parsedSelectedFeedback,\n          });\n        }\n        if (currentUnselectedFeedback && problemType === ProblemTypeKeys.MULTISELECT) {\n          const parsedUnselectedFeedback = this.parser.parse(currentUnselectedFeedback);\n          feedback.push({\n            ...parsedUnselectedFeedback,\n            '@_selected': false,\n          });\n        }\n        if (feedback.length) {\n          singleAnswer[`${option}hint`] = feedback;\n        }\n        singleAnswer = {\n          '@_correct': answer.correct,\n          ...title,\n          ...singleAnswer,\n        };\n        choice.push(singleAnswer);\n      }\n    });\n    widget = { [option]: choice };\n    if (_.has(this.problemState, 'groupFeedbackList') && problemType === ProblemTypeKeys.MULTISELECT) {\n      compoundhint = this.addGroupFeedbackList();\n      widget = {\n        ...widget,\n        compoundhint,\n      };\n    }\n    return widget;\n  }\n\n  /** addGroupFeedbackList()\n   * The problemState saved to the class constuctor is parsed for the attribute groupFeedbackList.\n   * No group feedback returns an empty array. Each groupFeedback in the groupFeedback list is\n   * mapped to a new object and appended to the compoundhint array.\n   * @return {object} object representation of compoundhints\n   */\n  addGroupFeedbackList() {\n    const compoundhint = [];\n    const { groupFeedbackList } = this.problemState;\n    groupFeedbackList.forEach((element) => {\n      compoundhint.push({\n        '#text': element.feedback,\n        '@_value': element.answers.join(' '),\n      });\n    });\n    return compoundhint;\n  }\n\n  /** addQuestion()\n   * The editorObject saved to the class constuctor is parsed for the attribute question. The question is parsed and\n   * checked for label tags. After the question is fully updated, the questionObject is returned.\n   * @return {object} object representaion of question\n   */\n  addQuestion() {\n    const { question } = this.editorObject;\n    const questionObject = this.questionParser.parse(question);\n    /* Removes block tags like <p> or <h1> that surround the <label> format.\n      Block tags are required by tinyMCE but have adverse effect on css in studio.\n      */\n    questionObject.forEach((tag, ind) => {\n      const tagName = Object.keys(tag)[0];\n      let label = null;\n      tag[tagName].forEach(subTag => {\n        const subTagName = Object.keys(subTag)[0];\n        if (subTagName === 'label') {\n          label = subTag;\n        }\n      });\n      if (label) {\n        questionObject[ind] = label;\n      }\n    });\n    return questionObject;\n  }\n\n  /** buildMultiSelectProblem()\n   * OLX builder for multiple choice, checkbox, and dropdown problems. The question\n   * builder has a different format than the other parts (demand hint, answers, and\n   * solution) of the problem so it has to be inserted into the OLX after the rest\n   * of the problem is built.\n   * @param {string} problemType - string of problem type tag\n   * @param {string} widget - string of answer tag name\n   * @param {string} option - string of feedback tag name\n   * @return {string} string of OLX\n   */\n  buildMultiSelectProblem(problemType, widget, option) {\n    const question = this.addQuestion();\n    const widgetObject = this.addMultiSelectAnswers(option);\n    const demandhint = this.addHints();\n    const solution = this.addSolution();\n\n    const problemObject = {\n      problem: {\n        [problemType]: {\n          [widget]: widgetObject,\n          ...solution,\n        },\n        ...demandhint,\n      },\n    };\n\n    const problem = this.builder.build(problemObject);\n    const questionString = this.questionBuilder.build(question);\n    let problemTypeTag;\n    switch (problemType) {\n      case ProblemTypeKeys.MULTISELECT:\n        [problemTypeTag] = problem.match(/<choiceresponse>|<choiceresponse.[^>]+>/);\n        break;\n      case ProblemTypeKeys.DROPDOWN:\n        [problemTypeTag] = problem.match(/<optionresponse>|<optionresponse.[^>]+>/);\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        [problemTypeTag] = problem.match(/<multiplechoiceresponse>|<multiplechoiceresponse.[^>]+>/);\n        break;\n      default:\n        break;\n    }\n    const updatedString = `${problemTypeTag}\\n${questionString}`;\n    const problemString = problem.replace(problemTypeTag, updatedString);\n\n    return problemString;\n  }\n\n  /** buildTextInput()\n   * String response OLX builder. The question builder has a different format than the\n   * other parts (demand hint, answers, and solution) of the problem so it has to be\n   * inserted into the OLX after the rest of the problem is built.\n   * @return {string} string of string response OLX\n   */\n  buildTextInput() {\n    const question = this.addQuestion();\n    const demandhint = this.addHints();\n    const answerObject = this.buildTextInputAnswersFeedback();\n    const solution = this.addSolution();\n\n    const problemObject = {\n      problem: {\n        [ProblemTypeKeys.TEXTINPUT]: {\n          ...answerObject,\n          ...solution,\n        },\n        ...demandhint,\n      },\n    };\n\n    const problem = this.builder.build(problemObject);\n    const questionString = this.questionBuilder.build(question);\n    const [problemTypeTag] = problem.match(/<stringresponse>|<stringresponse.[^>]+>/);\n    const updatedString = `${problemTypeTag}\\n${questionString}`;\n    const problemString = problem.replace(problemTypeTag, updatedString);\n\n    return problemString;\n  }\n\n  /** buildTextInputAnswersFeedback()\n   * The editorObject saved to the class constuctor is parsed for the attribute\n   * selectedFeedback. String response problems have two types of feedback tags,\n   * correcthint and stringequalhint. Correcthint is for feedback associated with\n   * correct answers and stringequalhint is for feedback associated with wrong\n   * answers. The answers are fetched from the problemState and looped through to\n   * pair feedback with its respective OLX tags. While matching feedback tags,\n   * answers are also mapped to their respective OLX tags. The first correct\n   * answer is wrapped in stringreponse tag. All other correct answers are wrapped\n   * in additonal_answer tags. Incorrect answers are wrapped in stringequalhint\n   * tags. The object representation of the answers is returned with the correct\n   * wrapping tags.\n   * @return {object} object representation of answers\n   */\n  buildTextInputAnswersFeedback() {\n    const { answers } = this.problemState;\n    const { selectedFeedback } = this.editorObject;\n    let answerObject = {};\n    const additionAnswers = [];\n    const wrongAnswers = [];\n    let firstCorrectAnswerParsed = false;\n    answers.forEach((answer) => {\n      const correcthint = this.getAnswerHints(selectedFeedback?.[answer.id]);\n      if (this.hasAttributeWithValue(answer, 'title')) {\n        if (answer.correct && firstCorrectAnswerParsed) {\n          additionAnswers.push({\n            '@_answer': answer.title,\n            ...correcthint,\n          });\n        } else if (answer.correct && !firstCorrectAnswerParsed) {\n          firstCorrectAnswerParsed = true;\n          answerObject = {\n            '@_answer': answer.title,\n            ...correcthint,\n          };\n        } else if (!answer.correct) {\n          const wronghint = correcthint.correcthint;\n          wrongAnswers.push({\n            '@_answer': answer.title,\n            ...wronghint,\n          });\n        }\n      }\n    });\n    answerObject = {\n      ...answerObject,\n      additional_answer: additionAnswers,\n      stringequalhint: wrongAnswers,\n      '@_type': _.get(this.problemState, 'additionalAttributes.type', 'ci'),\n      textline: {\n        '@_size': _.get(this.problemState, 'additionalAttributes.textline.size', 20),\n      },\n    };\n    return answerObject;\n  }\n\n  /** buildNumericInput()\n   * Numeric response OLX builder. The question builder has a different format than the\n   * other parts (demand hint, answers, and solution) of the problem so it has to be\n   * inserted into the OLX after the rest of the problem is built.\n   * @return {string} string of numeric response OLX\n   */\n  buildNumericInput() {\n    const question = this.addQuestion();\n    const demandhint = this.addHints();\n    const answerObject = this.buildNumericalResponse();\n    const solution = this.addSolution();\n\n    const problemObject = {\n      problem: {\n        [ProblemTypeKeys.NUMERIC]: {\n          ...answerObject,\n          ...solution,\n        },\n        ...demandhint,\n      },\n    };\n\n    const problem = this.builder.build(problemObject);\n    const questionString = this.questionBuilder.build(question);\n    const [problemTypeTag] = problem.match(/<numericalresponse>|<numericalresponse.[^>]+>/);\n    const updatedString = `${questionString}\\n${problemTypeTag}`;\n    const problemString = problem.replace(problemTypeTag, updatedString);\n\n    return problemString;\n  }\n\n  /** buildNumericalResponse()\n   * The editorObject saved to the class constuctor is parsed for the attribute\n   * selectedFeedback. The tolerance is fetched from the problemState settings.\n   * The answers are fetched from the problemState and looped through to\n   * pair feedback with its respective OLX tags. While matching feedback tags,\n   * answers are also mapped to their respective OLX tags. For each answer, if\n   * it is an answer range, it is santized to be less than to great than. The\n   * first answer is wrapped in numericresponse tag. All other answers are\n   * wrapped in additonal_answer tags. The object representation of the answers\n   * is returned with the correct  wrapping tags.\n   * @return {object} object representation of answers\n   */\n  buildNumericalResponse() {\n    const { answers } = this.problemState;\n    const { tolerance } = this.problemState.settings;\n    const { selectedFeedback } = this.editorObject;\n    let answerObject = {};\n    const additionalAnswers = [];\n    let firstCorrectAnswerParsed = false;\n    answers.forEach((answer) => {\n      const correcthint = this.getAnswerHints(selectedFeedback?.[answer.id]);\n      if (this.hasAttributeWithValue(answer, 'title')) {\n        let { title } = answer;\n        if (title.startsWith('(') || title.startsWith('[')) {\n          const parsedRange = title.split(',');\n          const [rawLowerBound, rawUpperBound] = parsedRange;\n          let lowerBoundInt;\n          let lowerBoundFraction;\n          let upperBoundInt;\n          let upperBoundFraction;\n          if (rawLowerBound.includes('/')) {\n            lowerBoundFraction = rawLowerBound.replace(/[^0-9-/]/gm, '');\n            const [numerator, denominator] = lowerBoundFraction.split('/');\n            const lowerBoundFloat = Number(numerator) / Number(denominator);\n            lowerBoundInt = lowerBoundFloat;\n          } else {\n            // these regex replaces remove everything that is not a decimal or positive/negative numer\n            lowerBoundInt = Number(rawLowerBound.replace(/[^0-9-.]/gm, ''));\n          }\n          if (rawUpperBound.includes('/')) {\n            upperBoundFraction = rawUpperBound.replace(/[^0-9-/]/gm, '');\n            const [numerator, denominator] = upperBoundFraction.split('/');\n            const upperBoundFloat = Number(numerator) / Number(denominator);\n            upperBoundInt = upperBoundFloat;\n          } else {\n            // these regex replaces remove everything that is not a decimal or positive/negative numer\n            upperBoundInt = Number(rawUpperBound.replace(/[^0-9-.]/gm, ''));\n          }\n          if (lowerBoundInt > upperBoundInt) {\n            const lowerBoundChar = rawUpperBound[rawUpperBound.length - 1] === ']' ? '[' : '(';\n            const upperBoundChar = rawLowerBound[0] === '[' ? ']' : ')';\n            if (lowerBoundFraction) {\n              lowerBoundInt = lowerBoundFraction;\n            }\n            if (upperBoundFraction) {\n              upperBoundInt = upperBoundFraction;\n            }\n            title = `${lowerBoundChar}${upperBoundInt},${lowerBoundInt}${upperBoundChar}`;\n          }\n        }\n        if (answer.correct && !firstCorrectAnswerParsed) {\n          firstCorrectAnswerParsed = true;\n          let responseParam = {};\n          if (tolerance?.value) {\n            responseParam = {\n              responseparam: {\n                '@_type': 'tolerance',\n                '@_default': `${tolerance.value}${tolerance.type === ToleranceTypes.number.type ? '' : '%'}`,\n              },\n            };\n          }\n          answerObject = {\n            '@_answer': title,\n            ...responseParam,\n            ...correcthint,\n          };\n        } else if (answer.correct && firstCorrectAnswerParsed) {\n          additionalAnswers.push({\n            '@_answer': title,\n            ...correcthint,\n          });\n        }\n      }\n    });\n    answerObject = {\n      ...answerObject,\n      additional_answer: additionalAnswers,\n      formulaequationinput: {\n        '#text': '',\n      },\n    };\n    return answerObject;\n  }\n\n  /** getAnswerHints(feedback)\n   * getAnswerHints takes feedback. The feedback is checked for definition. If feedback is\n   * undefined or an empty string, it returns an empty object. The defined feedback is\n   * parsed and saved to the key correcthint. Correcthint is the tag name for\n   * numeric response and string response feedback.\n   * @param {string} feedback - string of feedback\n   * @return {object} object representaion of feedback\n   */\n  getAnswerHints(feedback) {\n    let correcthint = {};\n    if (feedback !== undefined && feedback !== '') {\n      const parsedFeedback = this.parser.parse(feedback);\n      correcthint = {\n        correcthint: {\n          ...parsedFeedback,\n        },\n      };\n    }\n    return correcthint;\n  }\n\n  /** hasAttributeWithValue(obj, attr)\n   * hasAttributeWithValue takes obj and atrr. The obj is checked for the attribute defined by attr.\n   * Returns true if atrribute is present, otherwise false.\n   * @param {object} obj - defined object\n   * @param {string} attr - string of desired attribute\n   * @return {bool}\n   */\n  hasAttributeWithValue(obj, attr) {\n    return _.has(obj, attr) && _.get(obj, attr, '').toString().trim() !== '';\n  }\n\n  buildOLX() {\n    const { problemType } = this.problemState;\n    let problemString = '';\n\n    switch (problemType) {\n      case ProblemTypeKeys.MULTISELECT:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.DROPDOWN:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        problemString = this.buildTextInput();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        problemString = this.buildNumericInput();\n        break;\n      default:\n        break;\n    }\n    return problemString;\n  }\n}\n\nexport default ReactStateOLXParser;\n"],"mappings":"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"}