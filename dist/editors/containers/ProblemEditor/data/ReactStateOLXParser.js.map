{"version":3,"file":"ReactStateOLXParser.js","names":["_lodashEs","_interopRequireDefault","require","_fastXmlParser","_problem","_constants","_reactStateOLXHelpers","obj","__esModule","default","HtmlBlockTags","ReactStateOLXParser","constructor","problemState","richTextParserOptions","ignoreAttributes","alwaysCreateTextNode","numberParseOptions","leadingZeros","hex","preserveOrder","trimValues","unpairedTags","richTextBuilderOptions","attributeNamePrefix","suppressBooleanAttributes","format","suppressUnpairedNode","richTextParser","XMLParser","richTextBuilder","XMLBuilder","editorObject","problem","addHints","hintsArray","hints","length","forEach","hint","parsedHint","parse","push","demandhint","addSolution","solution","solutionTitle","p","parsedSolution","withWrapper","solutionObject","div","addMultiSelectAnswers","option","choice","compoundhint","answers","problemType","answerTitles","selectedFeedback","unselectedFeedback","answer","feedback","singleAnswer","title","id","currentSelectedFeedback","currentUnselectedFeedback","isEmpty","Object","keys","ProblemTypeKeys","MULTISELECT","parsedSelectedFeedback","parsedUnselectedFeedback","correct","_","has","addGroupFeedbackList","groupFeedbackList","element","join","addQuestion","question","questionObjectArray","result","findNodesAndRemoveTheirParentNodes","arrayOfNodes","nodesToFind","parentsToRemove","buildMultiSelectProblem","widget","widgetObject","problemBodyArr","questionString","build","hintString","problemBody","problemTypeTag","match","DROPDOWN","SINGLESELECT","questionStringWithEmDescriptionReplace","replaceEmWithDescriptionTag","updatedString","problemBodyString","replace","fullProblemString","xmlString","regexPattern","replacement","updatedHtml","buildTextInput","answerObject","buildTextInputAnswersFeedback","TEXTINPUT","firstCorrectAnswerParsed","correcthint","getAnswerHints","hasAttributeWithValue","additional_answer","get","wronghint","stringequalhint","textline","buildNumericInput","buildNumericalResponse","NUMERIC","tolerance","settings","startsWith","parsedRange","split","rawLowerBound","rawUpperBound","lowerBoundInt","lowerBoundFraction","upperBoundInt","upperBoundFraction","includes","numerator","denominator","lowerBoundFloat","Number","upperBoundFloat","lowerBoundChar","upperBoundChar","responseParam","value","responseparam","type","ToleranceTypes","number","formulaequationinput","undefined","parsedFeedback","attr","toString","trim","buildOLX","problemString","_default","exports"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/ReactStateOLXParser.js"],"sourcesContent":["import _ from 'lodash-es';\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\nimport { ToleranceTypes } from '../components/EditProblemView/SettingsWidget/settingsComponents/Tolerance/constants';\nimport { findNodesAndRemoveTheirParentNodes } from './reactStateOLXHelpers';\n\nconst HtmlBlockTags = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div', 'pre', 'blockquote', 'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'hr', 'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'colgroup', 'col', 'address', 'fieldset', 'legend'];\n\nclass ReactStateOLXParser {\n  constructor(problemState) {\n    const richTextParserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n      // Ensure whitespace inside <pre> tags is preserved\n      trimValues: false,\n      // Parse <br> correctly\n      unpairedTags: ['br'],\n    };\n    const richTextBuilderOptions = {\n      ignoreAttributes: false,\n      attributeNamePrefix: '@_',\n      suppressBooleanAttributes: false,\n      // Avoid formatting as it adds unwanted newlines and whitespace,\n      // breaking <pre> tags\n      format: false,\n      numberParseOptions: {\n        leadingZeros: false,\n        hex: false,\n      },\n      preserveOrder: true,\n      unpairedTags: ['br'],\n      // Output <br/> rather than <br>\n      suppressUnpairedNode: false,\n    };\n\n    this.richTextParser = new XMLParser(richTextParserOptions);\n    this.richTextBuilder = new XMLBuilder(richTextBuilderOptions);\n    this.editorObject = problemState.editorObject;\n    this.problemState = problemState.problem;\n  }\n\n  /** addHints()\n   * The editorObject saved to the class constuctor is parsed for the attribute hints. No hints returns an empty object.\n   * The hints are parsed and appended to the hintsArray as object representations of the hint. The hints array is saved\n   * to the hint key in the demandHint object and returned.\n   * @return {object} demandhint object with atrribut hint with array of objects\n   */\n  addHints() {\n    const hintsArray = [];\n    const { hints } = this.editorObject;\n    if (hints.length < 1) {\n      return hintsArray;\n    }\n    hints.forEach(hint => {\n      if (hint.length > 0) {\n        const parsedHint = this.richTextParser.parse(hint);\n        hintsArray.push({\n          hint: [...parsedHint],\n        });\n      }\n    });\n    const demandhint = [{ demandhint: hintsArray }];\n    return demandhint;\n  }\n\n  /** addSolution()\n   * The editorObject saved to the class constuctor is parsed for the attribute solution. If the soltuion is empty, it\n   * returns an empty object. The solution is parsed and checked if paragraph key's value is a string or array. Studio\n   * requires a div wrapper with a heading (Explanation). The heading is prepended to the parsed solution object. The\n   * solution object is returned with the updated div wrapper.\n   * @return {object} object representation of solution\n   */\n  addSolution() {\n    const { solution } = this.editorObject;\n    if (!solution || solution.length <= 0) { return []; }\n    const solutionTitle = { p: [{ '#text': 'Explanation' }] };\n    const parsedSolution = this.richTextParser.parse(solution);\n    const withWrapper = [solutionTitle, ...parsedSolution];\n    const solutionObject = [{\n      solution: [{\n        ':@': { '@_class': 'detailed-solution' },\n        div: [...withWrapper],\n      }],\n    }];\n    return solutionObject;\n  }\n\n  /** addMultiSelectAnswers(option)\n   * addMultiSelectAnswers takes option. Option is used to assign an answers to the\n   * correct OLX tag. This function is used for multiple choice, checkbox, and\n   * dropdown problems. The editorObject saved to the class constuctor is parsed for\n   * answers (titles only), selectFeedback, and unselectedFeedback. The problemState\n   * saved to the class constructor is parsed for the problemType and answers (full\n   * object). The answers are looped through to  pair feedback with its respective\n   * OLX tags. While matching feedback tags, answers are also mapped to their\n   * respective OLX tags. he object representation of the answers is returned with\n   * the correct wrapping tags. For checkbox problems, compound hints are also returned.\n   * @param {string} option - string of answer tag name\n   * @return {object} object representation of answers\n   */\n  addMultiSelectAnswers(option) {\n    const choice = [];\n    let compoundhint = [];\n    // eslint-disable-next-line prefer-const\n    let { answers, problemType } = this.problemState;\n    const answerTitles = this.editorObject?.answers;\n    const { selectedFeedback, unselectedFeedback } = this.editorObject;\n    /* todo */\n    /*\n      * the logic for general  feedback is ot current being used.\n      * when component is updated will need to return to this code.\n      * general feedback replaces selected feedback if all incorrect selected feedback is the same.\n      * ******************************************\n    if (generalFeedback !== ''\n    && answers.every(\n      answer => (\n        answer.correct\n          ? true\n          : answer?.selectedFeedback === answers.find(a => a.correct === false).selectedFeedback\n      ),\n    )) {\n      answers = answers.map(answer => (!answer?.correct\n        ? { ...answer, selectedFeedback: generalFeedback }\n        : answer));\n    }\n    */\n    answers.forEach((answer) => {\n      const feedback = [];\n      let singleAnswer = [];\n      const title = answerTitles ? this.richTextParser.parse(answerTitles[answer.id]) : [{ '#text': answer.title }];\n      const currentSelectedFeedback = selectedFeedback?.[answer.id] || null;\n      const currentUnselectedFeedback = unselectedFeedback?.[answer.id] || null;\n      let isEmpty;\n      if (answerTitles) {\n        isEmpty = Object.keys(title)?.length <= 0;\n      } else {\n        isEmpty = title['#text']?.length <= 0;\n      }\n      if (title && !isEmpty) {\n        if (currentSelectedFeedback && problemType === ProblemTypeKeys.MULTISELECT) {\n          const parsedSelectedFeedback = this.richTextParser.parse(currentSelectedFeedback);\n          feedback.push({\n            ':@': { '@_selected': true },\n            [`${option}hint`]: parsedSelectedFeedback,\n          });\n        }\n        if (currentSelectedFeedback && problemType !== ProblemTypeKeys.MULTISELECT) {\n          const parsedSelectedFeedback = this.richTextParser.parse(currentSelectedFeedback);\n          feedback.push({\n            [`${option}hint`]: parsedSelectedFeedback,\n          });\n        }\n        if (currentUnselectedFeedback && problemType === ProblemTypeKeys.MULTISELECT) {\n          const parsedUnselectedFeedback = this.richTextParser.parse(currentUnselectedFeedback);\n          feedback.push({\n            ':@': { '@_selected': false },\n            [`${option}hint`]: parsedUnselectedFeedback,\n          });\n        }\n        singleAnswer = {\n          ':@': { '@_correct': answer.correct },\n          [option]: [...title, ...feedback],\n        };\n        choice.push(singleAnswer);\n      }\n    });\n    if (_.has(this.problemState, 'groupFeedbackList') && problemType === ProblemTypeKeys.MULTISELECT) {\n      compoundhint = this.addGroupFeedbackList();\n      choice.push(...compoundhint);\n    }\n    return choice;\n  }\n\n  /** addGroupFeedbackList()\n   * The problemState saved to the class constuctor is parsed for the attribute groupFeedbackList.\n   * No group feedback returns an empty array. Each groupFeedback in the groupFeedback list is\n   * mapped to a new object and appended to the compoundhint array.\n   * @return {object} object representation of compoundhints\n   */\n  addGroupFeedbackList() {\n    const compoundhint = [];\n    const { groupFeedbackList } = this.problemState;\n    groupFeedbackList.forEach((element) => {\n      compoundhint.push({\n        compoundhint: [{ '#text': element.feedback }],\n        ':@': { '@_value': element.answers.join(' ') },\n      });\n    });\n    return compoundhint;\n  }\n\n  /** addQuestion()\n   * The editorObject saved to the class constuctor is parsed for the attribute question. The question is parsed and\n   * checked for label tags. label tags are extracted from block-type tags like <p> or <h1>, and the block-type tag is\n   * deleted while label is kept. For example, <p><label>Question</label></p> becomes <label>Question</label>, while\n   * <p><span>Text</span></p> remains <p><span>Text</span></p>. The question is returned as an object representation.\n   * @return {object} object representaion of question\n   */\n  addQuestion() {\n    const { question } = this.editorObject;\n    const questionObjectArray = this.richTextParser.parse(question);\n    /* Removes block tags like <p> or <h1> that surround the <label> format.\n      Block tags are required by tinyMCE but have adverse effect on css in studio.\n      */\n    const result = findNodesAndRemoveTheirParentNodes({\n      arrayOfNodes: questionObjectArray,\n      nodesToFind: ['label'],\n      parentsToRemove: HtmlBlockTags,\n    });\n\n    return result;\n  }\n\n  // findNodesWithChildTags(nodes, tagNames, recursive=false) {\n  //   const result = [];\n\n  /** buildMultiSelectProblem()\n   * OLX builder for multiple choice, checkbox, and dropdown problems. The question\n   * builder has a different format than the other parts (demand hint, answers, and\n   * solution) of the problem so it has to be inserted into the OLX after the rest\n   * of the problem is built.\n   * @param {string} problemType - string of problem type tag\n   * @param {string} widget - string of answer tag name\n   * @param {string} option - string of feedback tag name\n   * @return {string} string of OLX\n   */\n  buildMultiSelectProblem(problemType, widget, option) {\n    const question = this.addQuestion();\n    const widgetObject = this.addMultiSelectAnswers(option);\n    const demandhint = this.addHints();\n    const solution = this.addSolution();\n\n    const problemBodyArr = [{\n      [problemType]: [\n        { [widget]: widgetObject },\n        ...solution,\n      ],\n    }];\n\n    const questionString = this.richTextBuilder.build(question);\n    const hintString = this.richTextBuilder.build(demandhint);\n    const problemBody = this.richTextBuilder.build(problemBodyArr);\n    let problemTypeTag;\n\n    switch (problemType) {\n      case ProblemTypeKeys.MULTISELECT:\n        [problemTypeTag] = problemBody.match(/<choiceresponse>|<choiceresponse.[^>]+>/);\n        break;\n      case ProblemTypeKeys.DROPDOWN:\n        [problemTypeTag] = problemBody.match(/<optionresponse>|<optionresponse.[^>]+>/);\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        [problemTypeTag] = problemBody.match(/<multiplechoiceresponse>|<multiplechoiceresponse.[^>]+>/);\n        break;\n      default:\n        break;\n    }\n    const questionStringWithEmDescriptionReplace = this.replaceEmWithDescriptionTag(questionString);\n    const updatedString = `${problemTypeTag}\\n${questionStringWithEmDescriptionReplace}`;\n    const problemBodyString = problemBody.replace(problemTypeTag, updatedString);\n    const fullProblemString = `<problem>${problemBodyString}${hintString}\\n</problem>`;\n\n    return fullProblemString;\n  }\n\n  replaceEmWithDescriptionTag(xmlString) {\n    const regexPattern = /<em class=\"olx_description\">(.*?)<\\/em>/g;\n    const replacement = '<description>$1</description>';\n\n    const updatedHtml = xmlString.replace(regexPattern, replacement);\n    return updatedHtml;\n  }\n\n  /** buildTextInput()\n   * String response OLX builder. The question builder has a different format than the\n   * other parts (demand hint, answers, and solution) of the problem so it has to be\n   * inserted into the OLX after the rest of the problem is built.\n   * @return {string} string of string response OLX\n   */\n  buildTextInput() {\n    const question = this.addQuestion();\n    const demandhint = this.addHints();\n    const answerObject = this.buildTextInputAnswersFeedback();\n    const solution = this.addSolution();\n\n    answerObject[ProblemTypeKeys.TEXTINPUT].push(...solution);\n\n    const problemBody = this.richTextBuilder.build([answerObject]);\n    const questionString = this.richTextBuilder.build(question);\n    const hintString = this.richTextBuilder.build(demandhint);\n    const [problemTypeTag] = problemBody.match(/<stringresponse>|<stringresponse.[^>]+>/);\n    const updatedString = `${problemTypeTag}\\n${questionString}`;\n    const problemBodyString = problemBody.replace(problemTypeTag, updatedString);\n    const fullProblemString = `<problem>${problemBodyString}${hintString}\\n</problem>`;\n\n    return fullProblemString;\n  }\n\n  /** buildTextInputAnswersFeedback()\n   * The editorObject saved to the class constuctor is parsed for the attribute\n   * selectedFeedback. String response problems have two types of feedback tags,\n   * correcthint and stringequalhint. Correcthint is for feedback associated with\n   * correct answers and stringequalhint is for feedback associated with wrong\n   * answers. The answers are fetched from the problemState and looped through to\n   * pair feedback with its respective OLX tags. While matching feedback tags,\n   * answers are also mapped to their respective OLX tags. The first correct\n   * answer is wrapped in stringreponse tag. All other correct answers are wrapped\n   * in additonal_answer tags. Incorrect answers are wrapped in stringequalhint\n   * tags. The object representation of the answers is returned with the correct\n   * wrapping tags.\n   * @return {object} object representation of answers\n   */\n  buildTextInputAnswersFeedback() {\n    const { answers, problemType } = this.problemState;\n    const { selectedFeedback } = this.editorObject;\n    let answerObject = { [problemType]: [] };\n    let firstCorrectAnswerParsed = false;\n    answers.forEach((answer) => {\n      const correcthint = this.getAnswerHints(selectedFeedback?.[answer.id]);\n      if (this.hasAttributeWithValue(answer, 'title')) {\n        if (answer.correct && firstCorrectAnswerParsed) {\n          answerObject[problemType].push({\n            ':@': { '@_answer': answer.title },\n            additional_answer: [...correcthint],\n          });\n        } else if (answer.correct && !firstCorrectAnswerParsed) {\n          firstCorrectAnswerParsed = true;\n          answerObject = {\n            ':@': {\n              '@_answer': answer.title,\n              '@_type': _.get(this.problemState, 'additionalAttributes.type', 'ci'),\n            },\n            [problemType]: [...correcthint],\n          };\n        } else if (!answer.correct) {\n          const wronghint = correcthint[0]?.correcthint;\n          answerObject[problemType].push({\n            ':@': { '@_answer': answer.title },\n            stringequalhint: wronghint ? [...wronghint] : [],\n          });\n        }\n      }\n    });\n    answerObject[problemType].push({\n      textline: { '#text': '' },\n      ':@': { '@_size': _.get(this.problemState, 'additionalAttributes.textline.size', 20) },\n    });\n    return answerObject;\n  }\n\n  /** buildNumericInput()\n   * Numeric response OLX builder. The question builder has a different format than the\n   * other parts (demand hint, answers, and solution) of the problem so it has to be\n   * inserted into the OLX after the rest of the problem is built.\n   * @return {string} string of numeric response OLX\n   */\n  buildNumericInput() {\n    const question = this.addQuestion();\n    const demandhint = this.addHints();\n    const answerObject = this.buildNumericalResponse();\n    const solution = this.addSolution();\n\n    answerObject[ProblemTypeKeys.NUMERIC].push(...solution);\n\n    const problemBody = this.richTextBuilder.build([answerObject]);\n    const questionString = this.richTextBuilder.build(question);\n    const hintString = this.richTextBuilder.build(demandhint);\n    const [problemTypeTag] = problemBody.match(/<numericalresponse>|<numericalresponse.[^>]+>/);\n    const updatedString = `${questionString}\\n${problemTypeTag}`;\n    const problemBodyString = problemBody.replace(problemTypeTag, updatedString);\n    const fullProblemString = `<problem>${problemBodyString}${hintString}\\n</problem>`;\n\n    return fullProblemString;\n  }\n\n  /** buildNumericalResponse()\n   * The editorObject saved to the class constuctor is parsed for the attribute\n   * selectedFeedback. The tolerance is fetched from the problemState settings.\n   * The answers are fetched from the problemState and looped through to\n   * pair feedback with its respective OLX tags. While matching feedback tags,\n   * answers are also mapped to their respective OLX tags. For each answer, if\n   * it is an answer range, it is santized to be less than to great than. The\n   * first answer is wrapped in numericresponse tag. All other answers are\n   * wrapped in additonal_answer tags. The object representation of the answers\n   * is returned with the correct  wrapping tags.\n   * @return {object} object representation of answers\n   */\n  buildNumericalResponse() {\n    const { answers, problemType } = this.problemState;\n    const { tolerance } = this.problemState.settings;\n    const { selectedFeedback } = this.editorObject;\n    let answerObject = { [problemType]: [] };\n    let firstCorrectAnswerParsed = false;\n    answers.forEach((answer) => {\n      const correcthint = this.getAnswerHints(selectedFeedback?.[answer.id]);\n      if (this.hasAttributeWithValue(answer, 'title')) {\n        let { title } = answer;\n        if (title.startsWith('(') || title.startsWith('[')) {\n          const parsedRange = title.split(',');\n          const [rawLowerBound, rawUpperBound] = parsedRange;\n          let lowerBoundInt;\n          let lowerBoundFraction;\n          let upperBoundInt;\n          let upperBoundFraction;\n          if (rawLowerBound.includes('/')) {\n            lowerBoundFraction = rawLowerBound.replace(/[^0-9-/]/gm, '');\n            const [numerator, denominator] = lowerBoundFraction.split('/');\n            const lowerBoundFloat = Number(numerator) / Number(denominator);\n            lowerBoundInt = lowerBoundFloat;\n          } else {\n            // these regex replaces remove everything that is not a decimal or positive/negative numer\n            lowerBoundInt = Number(rawLowerBound.replace(/[^0-9-.]/gm, ''));\n          }\n          if (rawUpperBound.includes('/')) {\n            upperBoundFraction = rawUpperBound.replace(/[^0-9-/]/gm, '');\n            const [numerator, denominator] = upperBoundFraction.split('/');\n            const upperBoundFloat = Number(numerator) / Number(denominator);\n            upperBoundInt = upperBoundFloat;\n          } else {\n            // these regex replaces remove everything that is not a decimal or positive/negative numer\n            upperBoundInt = Number(rawUpperBound.replace(/[^0-9-.]/gm, ''));\n          }\n          if (lowerBoundInt > upperBoundInt) {\n            const lowerBoundChar = rawUpperBound[rawUpperBound.length - 1] === ']' ? '[' : '(';\n            const upperBoundChar = rawLowerBound[0] === '[' ? ']' : ')';\n            if (lowerBoundFraction) {\n              lowerBoundInt = lowerBoundFraction;\n            }\n            if (upperBoundFraction) {\n              upperBoundInt = upperBoundFraction;\n            }\n            title = `${lowerBoundChar}${upperBoundInt},${lowerBoundInt}${upperBoundChar}`;\n          }\n        }\n        if (answer.correct && !firstCorrectAnswerParsed) {\n          firstCorrectAnswerParsed = true;\n          const responseParam = [];\n          if (tolerance?.value) {\n            responseParam.push({\n              responseparam: [],\n              ':@': {\n                '@_type': 'tolerance',\n                '@_default': `${tolerance.value}${tolerance.type === ToleranceTypes.number.type ? '' : '%'}`,\n              },\n            });\n          }\n          answerObject = {\n            ':@': { '@_answer': title },\n            [problemType]: [...responseParam, ...correcthint],\n          };\n        } else if (answer.correct && firstCorrectAnswerParsed) {\n          answerObject[problemType].push({\n            ':@': { '@_answer': title },\n            additional_answer: [...correcthint],\n          });\n        }\n      }\n    });\n    answerObject[problemType].push({ formulaequationinput: { '#text': '' } });\n    return answerObject;\n  }\n\n  /** getAnswerHints(feedback)\n   * getAnswerHints takes feedback. The feedback is checked for definition. If feedback is\n   * undefined or an empty string, it returns an empty object. The defined feedback is\n   * parsed and saved to the key correcthint. Correcthint is the tag name for\n   * numeric response and string response feedback.\n   * @param {string} feedback - string of feedback\n   * @return {object} object representaion of feedback\n   */\n  getAnswerHints(feedback) {\n    const correcthint = [];\n    if (feedback !== undefined && feedback !== '') {\n      const parsedFeedback = this.richTextParser.parse(feedback);\n      correcthint.push({ correcthint: parsedFeedback });\n    }\n    return correcthint;\n  }\n\n  /** hasAttributeWithValue(obj, attr)\n   * hasAttributeWithValue takes obj and atrr. The obj is checked for the attribute defined by attr.\n   * Returns true if attribute is present, otherwise false.\n   * @param {object} obj - defined object\n   * @param {string} attr - string of desired attribute\n   * @return {bool}\n   */\n  hasAttributeWithValue(obj, attr) {\n    return _.has(obj, attr) && _.get(obj, attr, '').toString().trim() !== '';\n  }\n\n  buildOLX() {\n    const { problemType } = this.problemState;\n    let problemString = '';\n\n    switch (problemType) {\n      case ProblemTypeKeys.MULTISELECT:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.DROPDOWN:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        problemString = this.buildTextInput();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        problemString = this.buildNumericInput();\n        break;\n      default:\n        break;\n    }\n    return problemString;\n  }\n}\n\nexport default ReactStateOLXParser;\n"],"mappings":"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"}