{"version":3,"file":"OLXParser.test.js","names":["_OLXParser","require","_olxTestData","_problem","blankOlxParser","OLXParser","blankProblemOLX","rawOLX","checkboxOlxParser","checkboxesOLXWithFeedbackAndHintsOLX","numericOlxParser","numericInputWithFeedbackAndHintsOLX","dropdownOlxParser","dropdownOLXWithFeedbackAndHintsOLX","multipleChoiceOlxParser","multipleChoiceWithFeedbackAndHintsOLX","multipleChoiceWithoutAnswersOlxParser","multipleChoiceWithoutAnswers","multipleChoiceSingleAnswerOlxParser","multipleChoiceSingleAnswer","textInputOlxParser","textInputWithFeedbackAndHintsOLX","textInputMultipleAnswersOlxParser","textInputWithFeedbackAndHintsOLXWithMultipleAnswers","advancedOlxParser","advancedProblemOlX","multipleTextInputOlxParser","multipleTextInputProblemOlX","multipleNumericOlxParser","multipleNumericProblemOlX","numericAndTextInputOlxParser","NumericAndTextInputProblemOlX","labelDescriptionQuestionOlxParser","labelDescriptionQuestionOLX","shuffleOlxParser","shuffleProblemOLX","multiSelectPartialCreditOlxParser","multiSelectPartialCredit","singleSelectPartialCreditParser","singleSelectPartialCredit","numericalProblemPartialCreditParser","numericalProblemPartialCredit","describe","it","getParsedOLXData","e","expect","toBeInstanceOf","Error","message","toBe","olxparser","scriptProblemOlX","parseQuestions","toThrow","unexpectOlxAfterProblemTypeTagsParser","unexpectOlxAfterProblemTypeTags","problemType","getProblemType","toEqual","ProblemTypeKeys","MULTISELECT","NUMERIC","DROPDOWN","SINGLESELECT","TEXTINPUT","ADVANCED","hints","getHints","answers","parseMultipleChoiceAnswers","data","toHaveLength","numberParseTestOLX","parseStringResponse","parseNumericResponse","blankQuestionOLX","question","trim","htmlEntityTestOLX","styledQuestionOLX","tablesInRichTextTest","test","explanation","getSolutionExplanation","expected","solutionExplanation","replace","solutionExplanationTest","solutionExplanationWithoutDivTest","parseOutExplanationTests"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.test.js"],"sourcesContent":["import { OLXParser } from './OLXParser';\nimport {\n  checkboxesOLXWithFeedbackAndHintsOLX,\n  dropdownOLXWithFeedbackAndHintsOLX,\n  numericInputWithFeedbackAndHintsOLX,\n  textInputWithFeedbackAndHintsOLX,\n  multipleChoiceWithoutAnswers,\n  multipleChoiceSingleAnswer,\n  multipleChoiceWithFeedbackAndHintsOLX,\n  textInputWithFeedbackAndHintsOLXWithMultipleAnswers,\n  advancedProblemOlX,\n  multipleTextInputProblemOlX,\n  multipleNumericProblemOlX,\n  multiSelectPartialCredit,\n  NumericAndTextInputProblemOlX,\n  blankProblemOLX,\n  blankQuestionOLX,\n  styledQuestionOLX,\n  shuffleProblemOLX,\n  scriptProblemOlX,\n  singleSelectPartialCredit,\n  labelDescriptionQuestionOLX,\n  htmlEntityTestOLX,\n  numberParseTestOLX,\n  numericalProblemPartialCredit,\n  solutionExplanationTest,\n  solutionExplanationWithoutDivTest,\n  tablesInRichTextTest,\n  parseOutExplanationTests,\n  unexpectOlxAfterProblemTypeTags,\n} from './mockData/olxTestData';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\n\nconst blankOlxParser = new OLXParser(blankProblemOLX.rawOLX);\nconst checkboxOlxParser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\nconst numericOlxParser = new OLXParser(numericInputWithFeedbackAndHintsOLX.rawOLX);\nconst dropdownOlxParser = new OLXParser(dropdownOLXWithFeedbackAndHintsOLX.rawOLX);\nconst multipleChoiceOlxParser = new OLXParser(multipleChoiceWithFeedbackAndHintsOLX.rawOLX);\nconst multipleChoiceWithoutAnswersOlxParser = new OLXParser(multipleChoiceWithoutAnswers.rawOLX);\nconst multipleChoiceSingleAnswerOlxParser = new OLXParser(multipleChoiceSingleAnswer.rawOLX);\nconst textInputOlxParser = new OLXParser(textInputWithFeedbackAndHintsOLX.rawOLX);\nconst textInputMultipleAnswersOlxParser = new OLXParser(textInputWithFeedbackAndHintsOLXWithMultipleAnswers.rawOLX);\nconst advancedOlxParser = new OLXParser(advancedProblemOlX.rawOLX);\nconst multipleTextInputOlxParser = new OLXParser(multipleTextInputProblemOlX.rawOLX);\nconst multipleNumericOlxParser = new OLXParser(multipleNumericProblemOlX.rawOLX);\nconst numericAndTextInputOlxParser = new OLXParser(NumericAndTextInputProblemOlX.rawOLX);\nconst labelDescriptionQuestionOlxParser = new OLXParser(labelDescriptionQuestionOLX.rawOLX);\nconst shuffleOlxParser = new OLXParser(shuffleProblemOLX.rawOLX);\nconst multiSelectPartialCreditOlxParser = new OLXParser(multiSelectPartialCredit.rawOLX);\nconst singleSelectPartialCreditParser = new OLXParser(singleSelectPartialCredit.rawOLX);\nconst numericalProblemPartialCreditParser = new OLXParser(numericalProblemPartialCredit.rawOLX);\n\ndescribe('OLXParser', () => {\n  describe('throws error and redirects to advanced editor', () => {\n    describe('when settings attributes are on problem tags', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          labelDescriptionQuestionOlxParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Misc Attributes asscoiated with problem, opening in advanced editor');\n        }\n      });\n    });\n    describe('when settings attributes are on problem tags', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          shuffleOlxParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Misc Tags, reverting to Advanced Editor');\n        }\n      });\n    });\n    describe('when question parser finds script tags', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        const olxparser = new OLXParser(scriptProblemOlX.rawOLX);\n        expect(() => olxparser.parseQuestions('numericalresponse')).toThrow(new Error('Script Tag, reverting to Advanced Editor'));\n      });\n    });\n    describe('when multi select problem finds partial_credit attribute', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          multiSelectPartialCreditOlxParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Partial credit not supported by GUI, reverting to Advanced Editor');\n        }\n      });\n    });\n    describe('when numerical problem finds partial_credit attribute', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          numericalProblemPartialCreditParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Partial credit not supported by GUI, reverting to Advanced Editor');\n        }\n      });\n    });\n    describe('when single select problem finds partial_credit attribute', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        try {\n          singleSelectPartialCreditParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('Partial credit not supported by GUI, reverting to Advanced Editor');\n        }\n      });\n    });\n    describe('when signle select problem has unexpected olx after multiplechoiceresponse tag', () => {\n      it('should throw error and contain message regarding opening advanced editor', () => {\n        const unexpectOlxAfterProblemTypeTagsParser = new OLXParser(unexpectOlxAfterProblemTypeTags.rawOLX);\n        try {\n          unexpectOlxAfterProblemTypeTagsParser.getParsedOLXData();\n        } catch (e) {\n          expect(e).toBeInstanceOf(Error);\n          expect(e.message).toBe('OLX found after the multiplechoiceresponse tags, opening in advanced editor');\n        }\n      });\n    });\n  });\n  describe('getProblemType()', () => {\n    describe('given a blank problem', () => {\n      const problemType = blankOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.MULTISELECT', () => {\n        expect(problemType).toEqual(null);\n      });\n    });\n    describe('given checkbox olx with feedback and hints', () => {\n      const problemType = checkboxOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.MULTISELECT', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.MULTISELECT);\n      });\n    });\n    describe('given numeric olx with feedback and hints', () => {\n      const problemType = numericOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.NUMERIC', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.NUMERIC);\n      });\n    });\n    describe('given dropdown olx with feedback and hints', () => {\n      const problemType = dropdownOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.DROPDOWN', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.DROPDOWN);\n      });\n    });\n    describe('given multiple choice olx with feedback and hints', () => {\n      const problemType = multipleChoiceOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.SINGLESELECT', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.SINGLESELECT);\n      });\n    });\n    describe('given text input olx with feedback and hints', () => {\n      const problemType = textInputOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.TEXTINPUT', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.TEXTINPUT);\n      });\n    });\n    describe('given an advanced problem', () => {\n      const problemType = advancedOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n    describe('given a problem with multiple text inputs', () => {\n      const problemType = multipleTextInputOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n    describe('given a problem with multiple numeric inputs', () => {\n      const problemType = multipleNumericOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n    describe('given a problem with both a text and numeric input', () => {\n      const problemType = numericAndTextInputOlxParser.getProblemType();\n      it('should equal ProblemTypeKeys.ADVANCED', () => {\n        expect(problemType).toEqual(ProblemTypeKeys.ADVANCED);\n      });\n    });\n  });\n  describe('getHints()', () => {\n    describe('given a problem with no hints', () => {\n      const hints = labelDescriptionQuestionOlxParser.getHints();\n      it('should return an empty array', () => {\n        expect(hints).toEqual([]);\n      });\n    });\n    describe('given checkbox olx with feedback and hints', () => {\n      const hints = checkboxOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given numeric olx with feedback and hints', () => {\n      const hints = numericOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(numericInputWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given dropdown olx with feedback and hints', () => {\n      const hints = dropdownOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(dropdownOLXWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given multiple choice olx with feedback and hints', () => {\n      const hints = multipleChoiceOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(multipleChoiceWithFeedbackAndHintsOLX.hints);\n      });\n    });\n    describe('given text input olx with feedback and hints', () => {\n      const hints = textInputOlxParser.getHints();\n      it('should equal an array of hints', () => {\n        expect(hints).toEqual(textInputWithFeedbackAndHintsOLX.hints);\n      });\n    });\n  });\n  describe('parseMultipleChoiceAnswers()', () => {\n    describe('given a problem with no answers', () => {\n      const { answers } = multipleChoiceWithoutAnswersOlxParser.parseMultipleChoiceAnswers(\n        'multiplechoiceresponse',\n        'choicegroup',\n        'choice',\n      );\n      it('should return a default answer', () => {\n        expect(answers).toEqual(multipleChoiceWithoutAnswers.data.answers);\n        expect(answers).toHaveLength(1);\n      });\n    });\n    describe('given a problem with one answer', () => {\n      const { answers } = multipleChoiceSingleAnswerOlxParser.parseMultipleChoiceAnswers(\n        'multiplechoiceresponse',\n        'choicegroup',\n        'choice',\n      );\n      it('should return a single answer', () => {\n        expect(answers).toEqual(multipleChoiceSingleAnswer.data.answers);\n        expect(answers).toHaveLength(1);\n      });\n    });\n    describe('given multiple choice olx with hex numbers and leading zeros', () => {\n      const olxparser = new OLXParser(numberParseTestOLX.rawOLX);\n      const { answers } = olxparser.parseMultipleChoiceAnswers('multiplechoiceresponse', 'choicegroup', 'choice');\n      it('should not parse hex numbers and leading zeros', () => {\n        expect(answers).toEqual(numberParseTestOLX.data.answers);\n      });\n      it('should equal an array of objects with length four', () => {\n        expect(answers).toHaveLength(4);\n      });\n    });\n    describe('given checkbox olx with feedback and hints', () => {\n      const { answers } = checkboxOlxParser.parseMultipleChoiceAnswers('choiceresponse', 'checkboxgroup', 'choice');\n      it('should equal an array of objects with length four', () => {\n        expect(answers).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(4);\n      });\n    });\n    describe('given dropdown olx with feedback and hints', () => {\n      const { answers } = dropdownOlxParser.parseMultipleChoiceAnswers('optionresponse', 'optioninput', 'option');\n      it('should equal an array of objects with length three', () => {\n        expect(answers).toEqual(dropdownOLXWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(3);\n      });\n    });\n    describe('given multiple choice olx with feedback and hints', () => {\n      const { answers } = multipleChoiceOlxParser.parseMultipleChoiceAnswers('multiplechoiceresponse', 'choicegroup', 'choice');\n      it('should equal an array of objects with length three', () => {\n        expect(answers).toEqual(multipleChoiceWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(3);\n      });\n    });\n  });\n  describe('parseStringResponse()', () => {\n    // describe('given a problem with no answers', () => {\n    //   // TODO\n    // });\n    describe('given text input olx with feedback and hints', () => {\n      const { answers } = textInputOlxParser.parseStringResponse();\n      it('should equal an array of objects with length three', () => {\n        expect(answers).toEqual(textInputWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(3);\n      });\n    });\n    describe('given text input olx with feedback and hints with multiple answers', () => {\n      const { answers } = textInputMultipleAnswersOlxParser.parseStringResponse();\n      it('should equal an array of objects with length four', () => {\n        expect(answers).toEqual(textInputWithFeedbackAndHintsOLXWithMultipleAnswers.data.answers);\n        expect(answers).toHaveLength(4);\n      });\n    });\n  });\n  describe('parseNumericResponse()', () => {\n    // describe('given a problem with no answers', () => {\n    //   // TODDO\n    // });\n    describe('given numeric olx with feedback and hints', () => {\n      const { answers } = numericOlxParser.parseNumericResponse();\n      it('should equal an array of objects with length two', () => {\n        expect(answers).toEqual(numericInputWithFeedbackAndHintsOLX.data.answers);\n        expect(answers).toHaveLength(2);\n      });\n    });\n  });\n  describe('parseQuestions()', () => {\n    describe('given olx with no question content', () => {\n      const olxparser = new OLXParser(blankQuestionOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should return an empty string for question', () => {\n        expect(question.trim()).toBe(blankQuestionOLX.question);\n      });\n    });\n    describe('given a simple problem olx', () => {\n      const question = textInputOlxParser.parseQuestions('stringresponse');\n      it('should return a string of HTML', () => {\n        expect(question.trim()).toEqual(textInputWithFeedbackAndHintsOLX.question);\n      });\n    });\n    describe('given olx with html entities', () => {\n      const olxparser = new OLXParser(htmlEntityTestOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should not encode html entities', () => {\n        expect(question.trim()).toEqual(htmlEntityTestOLX.question);\n      });\n    });\n    describe('given olx with styled content', () => {\n      const olxparser = new OLXParser(styledQuestionOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should pase/build correct styling', () => {\n        expect(question.trim()).toBe(styledQuestionOLX.question);\n      });\n    });\n    describe('given olx with label and description tags inside response tag', () => {\n      const olxparser = new OLXParser(labelDescriptionQuestionOLX.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should append the label/description to the question, converting description to <em> with \"olx_description\" class', () => {\n        expect(question.trim()).toBe(labelDescriptionQuestionOLX.question);\n      });\n    });\n    describe('given olx with table tags', () => {\n      const olxparser = new OLXParser(tablesInRichTextTest.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const question = olxparser.parseQuestions(problemType);\n      it('should append the table to the question', () => {\n        expect(question.trim()).toBe(tablesInRichTextTest.question);\n      });\n    });\n  });\n  describe('getSolutionExplanation()', () => {\n    describe('for checkbox questions', () => {\n      test('should parse text in p tags', () => {\n        const olxparser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\n        const problemType = olxparser.getProblemType();\n        const explanation = olxparser.getSolutionExplanation(problemType);\n        const expected = checkboxesOLXWithFeedbackAndHintsOLX.solutionExplanation;\n        expect(explanation.replace(/\\s/g, '')).toBe(expected.replace(/\\s/g, ''));\n      });\n    });\n    it('should parse text with proper spacing', () => {\n      const olxparser = new OLXParser(solutionExplanationTest.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const explanation = olxparser.getSolutionExplanation(problemType);\n      expect(explanation).toBe(solutionExplanationTest.solutionExplanation);\n    });\n    it('should parse solution fields without div', () => {\n      const olxparser = new OLXParser(solutionExplanationWithoutDivTest.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const explanation = olxparser.getSolutionExplanation(problemType);\n      expect(explanation).toBe(solutionExplanationWithoutDivTest.solutionExplanation);\n    });\n    it('should parse out <p>Explanation</p>', () => {\n      const olxparser = new OLXParser(parseOutExplanationTests.rawOLX);\n      const problemType = olxparser.getProblemType();\n      const explanation = olxparser.getSolutionExplanation(problemType);\n      expect(explanation).toBe(parseOutExplanationTests.solutionExplanation);\n    });\n  });\n});\n"],"mappings":"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"}