{"version":3,"file":"index.js","names":["_react","_interopRequireWildcard","require","_i18n","_paragon","_propTypes","_interopRequireDefault","_SettingsOption","_messages","_constants","_jsxRuntime","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","isAnswerRangeSet","_ref","answers","isAnswerRange","exports","handleToleranceTypeChange","_ref2","updateSettings","tolerance","event","ToleranceTypes","none","type","newTolerance","selectedIndex","handleToleranceValueChange","_ref3","getSummary","_ref4","intl","percent","number","formatMessage","messages","noneToleranceSummary","ToleranceCard","_ref5","summary","useEffect","jsxs","title","toleranceSettingTitle","children","jsx","Alert","varaint","FormattedMessage","toleranceAnswerRangeWarning","className","toleranceSettingText","Form","Group","Control","as","onChange","disabled","map","toleranceType","message","floatingLabel","toleranceValueInputLabel","propTypes","PropTypes","shape","string","oneOfType","any","isRequired","arrayOf","correct","bool","id","selectedFeedback","unselectedFeedback","func","intlShape","_default","injectIntl"],"sources":["../../../../../../../../../src/editors/containers/ProblemEditor/components/EditProblemView/SettingsWidget/settingsComponents/Tolerance/index.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { injectIntl, FormattedMessage, intlShape } from '@edx/frontend-platform/i18n';\nimport { Alert, Form } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport SettingsOption from '../../SettingsOption';\nimport messages from './messages';\nimport { ToleranceTypes } from './constants';\n\n// eslint-disable-next-line no-unused-vars\nexport const isAnswerRangeSet = ({ answers }) => !!answers[0].isAnswerRange;\n\nexport const handleToleranceTypeChange = ({ updateSettings, tolerance, answers }) => (event) => {\n  if (!isAnswerRangeSet({ answers })) {\n    let value;\n    if (event.target.value === ToleranceTypes.none.type) {\n      value = null;\n    } else {\n      value = tolerance.value || 0;\n    }\n    const newTolerance = { type: ToleranceTypes[Object.keys(ToleranceTypes)[event.target.selectedIndex]].type, value };\n    updateSettings({ tolerance: newTolerance });\n  }\n};\n\nexport const handleToleranceValueChange = ({ updateSettings, tolerance, answers }) => (event) => {\n  if (!isAnswerRangeSet({ answers })) {\n    const newTolerance = { value: event.target.value, type: tolerance.type };\n    updateSettings({ tolerance: newTolerance });\n  }\n};\n\nexport const getSummary = ({ tolerance, intl }) => {\n  switch (tolerance?.type) {\n    case ToleranceTypes.percent.type:\n      return `± ${tolerance.value}%`;\n    case ToleranceTypes.number.type:\n      return `± ${tolerance.value}`;\n    case ToleranceTypes.none.type:\n      return intl.formatMessage(messages.noneToleranceSummary);\n    default:\n      return intl.formatMessage(messages.noneToleranceSummary);\n  }\n};\n\nexport const ToleranceCard = ({\n  tolerance,\n  answers,\n  updateSettings,\n  // inject\n  intl,\n}) => {\n  const isAnswerRange = isAnswerRangeSet({ answers });\n  let summary = getSummary({ tolerance, intl });\n  useEffect(() => { summary = getSummary({ tolerance, intl }); }, [tolerance]);\n  return (\n    <SettingsOption\n      title={intl.formatMessage(messages.toleranceSettingTitle)}\n      summary={summary}\n      none={tolerance.type === ToleranceTypes.none.type}\n    >\n      { isAnswerRange\n       && (\n       <Alert\n         varaint=\"info\"\n       >\n         <FormattedMessage {...messages.toleranceAnswerRangeWarning} />\n       </Alert>\n       )}\n      <div className=\"mb-3\">\n        <span>\n          <FormattedMessage {...messages.toleranceSettingText} />\n        </span>\n      </div>\n      <Form.Group className=\"pb-0 mb-0\">\n        <Form.Control\n          as=\"select\"\n          onChange={handleToleranceTypeChange({ updateSettings, tolerance, answers })}\n          disabled={isAnswerRange}\n          value={tolerance.type}\n        >\n          {Object.keys(ToleranceTypes).map((toleranceType) => (\n            <option\n              key={toleranceType.type}\n              value={toleranceType.type}\n            >\n              {intl.formatMessage(ToleranceTypes[toleranceType].message)}\n            </option>\n          ))}\n        </Form.Control>\n        { tolerance?.type !== ToleranceTypes.none.type && !isAnswerRange\n          && (\n          <Form.Control\n            className=\"mt-4\"\n            type=\"number\"\n            value={tolerance.value}\n            onChange={handleToleranceValueChange({ updateSettings, tolerance, answers })}\n            floatingLabel={intl.formatMessage(messages.toleranceValueInputLabel)}\n          />\n          )}\n      </Form.Group>\n\n    </SettingsOption>\n  );\n};\n\nToleranceCard.propTypes = {\n  tolerance: PropTypes.shape({\n    type: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.any]),\n  }).isRequired,\n  answers: PropTypes.arrayOf(PropTypes.shape({\n    correct: PropTypes.bool,\n    id: PropTypes.string,\n    selectedFeedback: PropTypes.string,\n    title: PropTypes.string,\n    unselectedFeedback: PropTypes.string,\n  })).isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ToleranceCard);\n"],"mappings":"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"}